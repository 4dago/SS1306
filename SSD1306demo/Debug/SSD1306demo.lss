
SSD1306demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001436  000014ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080015e  0080015e  00001528  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000138  00000000  00000000  000040d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5f  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050c  00000000  00000000  00005167  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e5  00000000  00000000  00005673  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00005f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031a  00000000  00000000  00006268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aed  00000000  00000000  00006582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000706f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__ctors_end>
       4:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
       8:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
       c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      10:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      14:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      18:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      1c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      20:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      24:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      28:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      2c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      30:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      34:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      38:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      3c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      40:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      44:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      48:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      4c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      50:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      54:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      58:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      5c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      60:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      64:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      68:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>
      6c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__bad_interrupt>

00000070 <font>:
      70:	00 3e 7f 41 4d 4f 2e 00 00 20 74 54 54 7c 78 00     .>.AMO... tTT|x.
      80:	00 7e 7e 48 48 78 30 00 00 38 7c 44 44 44 00 00     .~~HHx0..8|DDD..
      90:	00 30 78 48 48 7e 7e 00 00 38 7c 54 54 5c 18 00     .0xHH~~..8|TT\..
      a0:	00 00 08 7c 7e 0a 0a 00 00 98 bc a4 a4 fc 7c 00     ...|~.........|.
      b0:	00 7e 7e 08 08 78 70 00 00 00 48 7a 7a 40 00 00     .~~..xp...Hzz@..
      c0:	00 00 80 80 80 fa 7a 00 00 7e 7e 10 38 68 40 00     ......z..~~.8h@.
      d0:	00 00 42 7e 7e 40 00 00 00 7c 7c 18 38 1c 7c 78     ..B~~@...||.8.|x
      e0:	00 7c 7c 04 04 7c 78 00 00 38 7c 44 44 7c 38 00     .||..|x..8|DD|8.
      f0:	00 fc fc 24 24 3c 18 00 00 18 3c 24 24 fc fc 00     ...$$<....<$$...
     100:	00 7c 7c 04 04 0c 08 00 00 48 5c 54 54 74 24 00     .||......H\TTt$.
     110:	00 04 04 3e 7e 44 44 00 00 3c 7c 40 40 7c 7c 00     ...>~DD..<|@@||.
     120:	00 1c 3c 60 60 3c 1c 00 00 1c 7c 70 38 70 7c 1c     ..<``<....|p8p|.
     130:	00 44 6c 38 38 6c 44 00 00 9c bc a0 e0 7c 3c 00     .Dl88lD......|<.
     140:	00 44 64 74 5c 4c 44 00 00 00 7f 7f 41 41 00 00     .Ddt\LD.....AA..
     150:	40 68 7c 5e 49 49 22 00 00 00 41 41 7f 7f 00 00     @h|^II"...AA....
     160:	00 08 0c fe fe 0c 08 00 00 18 3c 7e 18 18 18 18     ..........<~....
	...
     178:	00 00 00 4f 4f 00 00 00 00 07 07 00 00 07 07 00     ...OO...........
     188:	14 7f 7f 14 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00     .........$.kk:..
     198:	00 63 33 18 0c 66 63 00 00 32 7f 4d 4d 77 72 50     .c3..fc..2.MMwrP
     1a8:	00 00 00 04 06 03 01 00 00 00 1c 3e 63 41 00 00     ...........>cA..
     1b8:	00 00 41 63 3e 1c 00 00 08 2a 3e 1c 1c 3e 2a 08     ..Ac>....*>..>*.
     1c8:	00 08 08 3e 3e 08 08 00 00 00 80 e0 60 00 00 00     ...>>.......`...
     1d8:	00 08 08 08 08 08 08 00 00 00 00 60 60 00 00 00     ...........``...
     1e8:	00 40 60 30 18 0c 06 02 00 3e 7f 49 45 7f 3e 00     .@`0.....>.IE.>.
     1f8:	00 40 44 7f 7f 40 40 00 00 62 73 51 49 4f 46 00     .@D..@@..bsQIOF.
     208:	00 22 63 49 49 7f 36 00 00 18 18 14 16 7f 7f 10     ."cII.6.........
     218:	00 27 67 45 45 7d 39 00 00 3e 7f 49 49 7b 32 00     .'gEE}9..>.II{2.
     228:	00 03 03 79 7d 07 03 00 00 36 7f 49 49 7f 36 00     ...y}....6.II.6.
     238:	00 26 6f 49 49 7f 3e 00 00 00 00 24 24 00 00 00     .&oII.>....$$...
     248:	00 00 80 e4 64 00 00 00 00 08 1c 36 63 41 41 00     ....d......6cAA.
     258:	00 14 14 14 14 14 14 00 00 41 41 63 36 1c 08 00     .........AAc6...
     268:	00 02 03 51 59 0f 06 00 18 18 18 18 18 18 18 18     ...QY...........
     278:	00 7c 7e 0b 0b 7e 7c 00 00 7f 7f 49 49 7f 36 00     .|~..~|....II.6.
     288:	00 3e 7f 41 41 63 22 00 00 7f 7f 41 63 3e 1c 00     .>.AAc"....Ac>..
     298:	00 7f 7f 49 49 41 41 00 00 7f 7f 09 09 01 01 00     ...IIAA.........
     2a8:	00 3e 7f 41 49 7b 3a 00 00 7f 7f 08 08 7f 7f 00     .>.AI{:.........
     2b8:	00 00 41 7f 7f 41 00 00 00 20 60 41 7f 3f 01 00     ..A..A... `A.?..
     2c8:	00 7f 7f 1c 36 63 41 00 00 7f 7f 40 40 40 40 00     ....6cA....@@@@.
     2d8:	00 7f 7f 06 0c 06 7f 7f 00 7f 7f 0e 1c 7f 7f 00     ................
     2e8:	00 3e 7f 41 41 7f 3e 00 00 7f 7f 09 09 0f 06 00     .>.AA.>.........
     2f8:	00 1e 3f 21 61 7f 5e 00 00 7f 7f 19 39 6f 46 00     ..?!a.^.....9oF.
     308:	00 26 6f 49 49 7b 32 00 00 01 01 7f 7f 01 01 00     .&oII{2.........
     318:	00 3f 7f 40 40 7f 3f 00 00 1f 3f 60 60 3f 1f 00     .?.@@.?...?``?..
     328:	00 7f 7f 30 18 30 7f 7f 00 63 77 1c 1c 77 63 00     ...0.0...cw..wc.
     338:	00 07 0f 78 78 0f 07 00 00 61 71 59 4d 47 43 00     ...xx....aqYMGC.
     348:	18 18 18 ff ff 18 18 18 33 33 cc cc 00 00 00 00     ........33......
     358:	00 00 00 ff ff 00 00 00 00 00 00 0f 0f 00 00 00     ................
     368:	00 00 00 f0 f0 00 00 00 ff ff ff ff ff ff ff ff     ................
     378:	ff ff ff ff 00 00 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
     388:	01 01 01 01 01 01 01 01 80 80 80 80 80 80 80 80     ................
     398:	ff ff 00 00 00 00 00 00 33 33 cc cc 33 33 cc cc     ........33..33..
     3a8:	00 00 00 00 00 00 ff ff 30 30 c0 c0 30 30 c0 c0     ........00..00..
     3b8:	33 99 cc 66 33 99 cc 66 00 00 00 00 00 00 ff ff     3..f3..f........
     3c8:	00 00 00 ff ff 18 18 18 00 00 00 00 f0 f0 f0 f0     ................
     3d8:	00 00 00 1f 1f 18 18 18 18 18 18 f8 f8 00 00 00     ................
     3e8:	c0 c0 c0 c0 c0 c0 c0 c0 00 00 00 f8 f8 18 18 18     ................
     3f8:	18 18 18 1f 1f 18 18 18 18 18 18 f8 f8 18 18 18     ................
     408:	18 18 18 ff ff 00 00 00 ff ff 00 00 00 00 00 00     ................
     418:	ff ff ff 00 00 00 00 00 00 00 00 00 00 ff ff ff     ................
     428:	03 03 03 03 03 03 03 03 07 07 07 07 07 07 07 07     ................
     438:	e0 e0 e0 e0 e0 e0 e0 e0 00 78 78 30 18 0c 06 03     .........xx0....
     448:	f0 f0 f0 f0 00 00 00 00 00 00 00 00 0f 0f 0f 0f     ................
     458:	18 18 18 1f 1f 00 00 00 0f 0f 0f 0f 00 00 00 00     ................
     468:	0f 0f 0f 0f f0 f0 f0 f0                             ........

00000470 <sine_table>:
     470:	80 8c 98 a5 b0 bc c6 d0 da e2 ea f0 f5 fa fd fe     ................
     480:	ff fe fd fa f5 f0 ea e2 da d0 c6 bc b0 a5 98 8c     ................
     490:	80 73 67 5a 4f 43 39 2f 25 1d 15 0f 0a 05 02 01     .sgZOC9/%.......
     4a0:	00 01 02 05 0a 0f 15 1d 25 2f 39 43 4f 5a 67 73     ........%/9COZgs

000004b0 <__ctors_end>:
     4b0:	11 24       	eor	r1, r1
     4b2:	1f be       	out	0x3f, r1	; 63
     4b4:	cf ef       	ldi	r28, 0xFF	; 255
     4b6:	d4 e0       	ldi	r29, 0x04	; 4
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	cd bf       	out	0x3d, r28	; 61

000004bc <__do_copy_data>:
     4bc:	11 e0       	ldi	r17, 0x01	; 1
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b1 e0       	ldi	r27, 0x01	; 1
     4c2:	e6 e3       	ldi	r30, 0x36	; 54
     4c4:	f4 e1       	ldi	r31, 0x14	; 20
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__do_copy_data+0x10>
     4c8:	05 90       	lpm	r0, Z+
     4ca:	0d 92       	st	X+, r0
     4cc:	ae 35       	cpi	r26, 0x5E	; 94
     4ce:	b1 07       	cpc	r27, r17
     4d0:	d9 f7       	brne	.-10     	; 0x4c8 <__do_copy_data+0xc>

000004d2 <__do_clear_bss>:
     4d2:	11 e0       	ldi	r17, 0x01	; 1
     4d4:	ae e5       	ldi	r26, 0x5E	; 94
     4d6:	b1 e0       	ldi	r27, 0x01	; 1
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <.do_clear_bss_start>

000004da <.do_clear_bss_loop>:
     4da:	1d 92       	st	X+, r1

000004dc <.do_clear_bss_start>:
     4dc:	ae 36       	cpi	r26, 0x6E	; 110
     4de:	b1 07       	cpc	r27, r17
     4e0:	e1 f7       	brne	.-8      	; 0x4da <.do_clear_bss_loop>
     4e2:	0e 94 99 05 	call	0xb32	; 0xb32 <main>
     4e6:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <_exit>

000004ea <__bad_interrupt>:
     4ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004ee <oled_write>:
// Port this bit to hardware SPI/I2C/Paralell/LVDS/PCI-E/Infiniband if you need faster transport.
// dc arg specifies data or control buffer, 0 -> control, 1 -> data
void oled_write(uint8_t dc, uint8_t data) {
	// add delays to stretch bit times if needed
	// SSD1306 needs something like 50ns hold...probably not needed unless you port this to an ARM or AVR32.
if(dc > 0) { H(PORTC, SS1306_OLED_DC); }
     4ee:	88 23       	and	r24, r24
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <oled_write+0x8>
     4f2:	49 9a       	sbi	0x09, 1	; 9
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <oled_write+0xa>
	else { L(PORTC, SS1306_OLED_DC); }
     4f6:	49 98       	cbi	0x09, 1	; 9
	
	L(PORTC, SS1306_OLED_CS);
     4f8:	4a 98       	cbi	0x09, 2	; 9
     4fa:	87 e0       	ldi	r24, 0x07	; 7
     4fc:	90 e0       	ldi	r25, 0x00	; 0
	for(int8_t bit = 7; bit >= 0; bit--)
	{
		L(PORTC, SS1306_OLED_CLK);
		if((1 << bit) & data) { H(PORTC, SS1306_OLED_DAT); } 
     4fe:	70 e0       	ldi	r23, 0x00	; 0
	else { L(PORTC, SS1306_OLED_DC); }
	
	L(PORTC, SS1306_OLED_CS);
	for(int8_t bit = 7; bit >= 0; bit--)
	{
		L(PORTC, SS1306_OLED_CLK);
     500:	4c 98       	cbi	0x09, 4	; 9
		if((1 << bit) & data) { H(PORTC, SS1306_OLED_DAT); } 
     502:	9b 01       	movw	r18, r22
     504:	08 2e       	mov	r0, r24
     506:	02 c0       	rjmp	.+4      	; 0x50c <__stack+0xd>
     508:	35 95       	asr	r19
     50a:	27 95       	ror	r18
     50c:	0a 94       	dec	r0
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__stack+0x9>
     510:	20 ff       	sbrs	r18, 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0x19>
     514:	4d 9a       	sbi	0x09, 5	; 9
     516:	01 c0       	rjmp	.+2      	; 0x51a <__stack+0x1b>
		else { L(PORTC, SS1306_OLED_DAT); }
     518:	4d 98       	cbi	0x09, 5	; 9
		H(PORTC, SS1306_OLED_CLK);
     51a:	4c 9a       	sbi	0x09, 4	; 9
     51c:	01 97       	sbiw	r24, 0x01	; 1
	// SSD1306 needs something like 50ns hold...probably not needed unless you port this to an ARM or AVR32.
if(dc > 0) { H(PORTC, SS1306_OLED_DC); }
	else { L(PORTC, SS1306_OLED_DC); }
	
	L(PORTC, SS1306_OLED_CS);
	for(int8_t bit = 7; bit >= 0; bit--)
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	8f 3f       	cpi	r24, 0xFF	; 255
     522:	92 07       	cpc	r25, r18
     524:	69 f7       	brne	.-38     	; 0x500 <__stack+0x1>
		L(PORTC, SS1306_OLED_CLK);
		if((1 << bit) & data) { H(PORTC, SS1306_OLED_DAT); } 
		else { L(PORTC, SS1306_OLED_DAT); }
		H(PORTC, SS1306_OLED_CLK);
	}
	L(PORTC, SS1306_OLED_CLK);
     526:	4c 98       	cbi	0x09, 4	; 9
	H(PORTC, SS1306_OLED_CS);
     528:	4a 9a       	sbi	0x09, 2	; 9
}
     52a:	08 95       	ret

0000052c <oled_init>:

// These defaults are for a 128x64 configuration, adapt as needed
// seg remap, com scan, mux ratio, addr mode are suggested things to poke at
void oled_init() {
	L(PORTB, SS1306_OLED_RST);
     52c:	6a 98       	cbi	0x0d, 2	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52e:	83 ec       	ldi	r24, 0xC3	; 195
     530:	99 e0       	ldi	r25, 0x09	; 9
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <oled_init+0x6>
     536:	00 c0       	rjmp	.+0      	; 0x538 <oled_init+0xc>
     538:	00 00       	nop
	_delay_ms(10);
	H(PORTB, SS1306_OLED_RST);
     53a:	6a 9a       	sbi	0x0d, 2	; 13
     53c:	83 ec       	ldi	r24, 0xC3	; 195
     53e:	99 e0       	ldi	r25, 0x09	; 9
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <oled_init+0x14>
     544:	00 c0       	rjmp	.+0      	; 0x546 <oled_init+0x1a>
     546:	00 00       	nop
	_delay_ms(10);
	oled_write(0, 0xAE); // display off
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	6e ea       	ldi	r22, 0xAE	; 174
     54c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xD5); // clock
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	65 ed       	ldi	r22, 0xD5	; 213
     554:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x81); // upper nibble is rate, lower nibble is divisor
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	61 e8       	ldi	r22, 0x81	; 129
     55c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xA8); // mux ratio
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	68 ea       	ldi	r22, 0xA8	; 168
     564:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x3F); // rtfm
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	6f e3       	ldi	r22, 0x3F	; 63
     56c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xD3); // display offset
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	63 ed       	ldi	r22, 0xD3	; 211
     574:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x00); // rtfm
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x00);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0x8D); // charge pump
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	6d e8       	ldi	r22, 0x8D	; 141
     58c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x14); // enable
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	64 e1       	ldi	r22, 0x14	; 20
     594:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0x20); // memory addr mode
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	60 e2       	ldi	r22, 0x20	; 32
     59c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x00); // horizontal
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xA1); // segment remap
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	61 ea       	ldi	r22, 0xA1	; 161
     5ac:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xA5); // display on
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	65 ea       	ldi	r22, 0xA5	; 165
     5b4:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xC8); // com scan direction
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	68 ec       	ldi	r22, 0xC8	; 200
     5bc:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0xDA); // com hardware cfg
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	6a ed       	ldi	r22, 0xDA	; 218
     5c4:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x12); // alt com cfg
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	62 e1       	ldi	r22, 0x12	; 18
     5cc:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0x81); // contrast aka current
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	61 e8       	ldi	r22, 0x81	; 129
     5d4:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x7F); // 128 is midpoint
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	6f e7       	ldi	r22, 0x7F	; 127
     5dc:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xD9); // precharge
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	69 ed       	ldi	r22, 0xD9	; 217
     5e4:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x11); // rtfm
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	61 e1       	ldi	r22, 0x11	; 17
     5ec:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xDB); // vcomh deselect level
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	6b ed       	ldi	r22, 0xDB	; 219
     5f4:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x20); // rtfm
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	60 e2       	ldi	r22, 0x20	; 32
     5fc:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xA6); // non-inverted
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	66 ea       	ldi	r22, 0xA6	; 166
     604:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	
	oled_write(0, 0xA4); // display scan on
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	64 ea       	ldi	r22, 0xA4	; 164
     60c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0xAF); // drivers on
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	6f ea       	ldi	r22, 0xAF	; 175
     614:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
}
     618:	08 95       	ret

0000061a <oled_display_en>:

void oled_display_en(uint8_t state) {
}
     61a:	08 95       	ret

0000061c <oled_set_clock>:

void oled_set_clock(uint8_t val) {
     61c:	cf 93       	push	r28
     61e:	c8 2f       	mov	r28, r24
	oled_write(0, 0xD5);
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	65 ed       	ldi	r22, 0xD5	; 213
     624:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, val);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	6c 2f       	mov	r22, r28
     62c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
}
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <oled_set_addr_mode>:

void oled_set_addr_mode(uint8_t mode) {
     634:	cf 93       	push	r28
     636:	c8 2f       	mov	r28, r24
	// 0 -> horizontal (write column, increment column pointer, at column overrun reset column pointer and increment page pointer)
	// 1 -> vertical (write column, increment page pointer, at page overrun reset page pointer and increment column pointer)
	// 2 -> page (write column, increment column pointer, reset column pointer at overrun)
	oled_write(0, 0x20);
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	60 e2       	ldi	r22, 0x20	; 32
     63c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, (mode < 2) ? mode : 0);
     640:	c2 30       	cpi	r28, 0x02	; 2
     642:	08 f0       	brcs	.+2      	; 0x646 <oled_set_addr_mode+0x12>
     644:	c0 e0       	ldi	r28, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	6c 2f       	mov	r22, r28
     64a:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
}
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <oled_put_tile>:

void oled_put_tile(uint8_t *tile, uint8_t limit) {
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	8c 01       	movw	r16, r24
	for(uint16_t i = 0; i < limit; i++) {
     65c:	c6 2f       	mov	r28, r22
     65e:	d0 e0       	ldi	r29, 0x00	; 0
     660:	20 97       	sbiw	r28, 0x00	; 0
     662:	59 f0       	breq	.+22     	; 0x67a <oled_put_tile+0x28>
	// 2 -> page (write column, increment column pointer, reset column pointer at overrun)
	oled_write(0, 0x20);
	oled_write(0, (mode < 2) ? mode : 0);
}

void oled_put_tile(uint8_t *tile, uint8_t limit) {
     664:	c8 0f       	add	r28, r24
     666:	d9 1f       	adc	r29, r25
	for(uint16_t i = 0; i < limit; i++) {
		oled_write(1, *tile++);
     668:	f8 01       	movw	r30, r16
     66a:	61 91       	ld	r22, Z+
     66c:	8f 01       	movw	r16, r30
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x20);
	oled_write(0, (mode < 2) ? mode : 0);
}

void oled_put_tile(uint8_t *tile, uint8_t limit) {
	for(uint16_t i = 0; i < limit; i++) {
     674:	0c 17       	cp	r16, r28
     676:	1d 07       	cpc	r17, r29
     678:	b9 f7       	brne	.-18     	; 0x668 <oled_put_tile+0x16>
		oled_write(1, *tile++);
	}
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	08 95       	ret

00000684 <oled_putc_raw>:

void oled_putc_raw(char c) {
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
	for(uint16_t i = c << 3; i < (c << 3) + 8; i++) {
     68c:	08 2f       	mov	r16, r24
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	00 0f       	add	r16, r16
     692:	11 1f       	adc	r17, r17
     694:	00 0f       	add	r16, r16
     696:	11 1f       	adc	r17, r17
     698:	00 0f       	add	r16, r16
     69a:	11 1f       	adc	r17, r17
     69c:	c8 01       	movw	r24, r16
     69e:	08 96       	adiw	r24, 0x08	; 8
     6a0:	08 17       	cp	r16, r24
     6a2:	19 07       	cpc	r17, r25
     6a4:	70 f4       	brcc	.+28     	; 0x6c2 <oled_putc_raw+0x3e>
	for(uint16_t i = 0; i < limit; i++) {
		oled_write(1, *tile++);
	}
}

void oled_putc_raw(char c) {
     6a6:	e8 01       	movw	r28, r16
     6a8:	c0 59       	subi	r28, 0x90	; 144
     6aa:	df 4f       	sbci	r29, 0xFF	; 255
     6ac:	08 58       	subi	r16, 0x88	; 136
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint16_t i = c << 3; i < (c << 3) + 8; i++) {
		oled_write(1, pgm_read_byte(font + i));
     6b0:	fe 01       	movw	r30, r28
     6b2:	64 91       	lpm	r22, Z
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
     6ba:	21 96       	adiw	r28, 0x01	; 1
		oled_write(1, *tile++);
	}
}

void oled_putc_raw(char c) {
	for(uint16_t i = c << 3; i < (c << 3) + 8; i++) {
     6bc:	c0 17       	cp	r28, r16
     6be:	d1 07       	cpc	r29, r17
     6c0:	b9 f7       	brne	.-18     	; 0x6b0 <oled_putc_raw+0x2c>
		oled_write(1, pgm_read_byte(font + i));
	}
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <oled_putc>:

void oled_putc(char c) {
	// remap from petscii to ascii, shifts drawing characters into the lower 32 ascii cells
	if(c > 'A' && c < 'Z') { }               // upper-case ascii range
     6cc:	98 2f       	mov	r25, r24
     6ce:	92 54       	subi	r25, 0x42	; 66
     6d0:	98 31       	cpi	r25, 0x18	; 24
     6d2:	60 f0       	brcs	.+24     	; 0x6ec <oled_putc+0x20>
	else if(c > 'a' && c < 'z') { c -= 96; } // lower-case ascii range
     6d4:	90 52       	subi	r25, 0x20	; 32
     6d6:	98 31       	cpi	r25, 0x18	; 24
     6d8:	10 f4       	brcc	.+4      	; 0x6de <oled_putc+0x12>
     6da:	80 56       	subi	r24, 0x60	; 96
     6dc:	07 c0       	rjmp	.+14     	; 0x6ec <oled_putc+0x20>
	else if(c > 31 && c < 64) { }            // numbers and symbols
     6de:	98 2f       	mov	r25, r24
     6e0:	90 52       	subi	r25, 0x20	; 32
     6e2:	90 32       	cpi	r25, 0x20	; 32
     6e4:	18 f0       	brcs	.+6      	; 0x6ec <oled_putc+0x20>
	else if(c < 32) { c += 96; }             // low ascii
     6e6:	80 32       	cpi	r24, 0x20	; 32
     6e8:	08 f4       	brcc	.+2      	; 0x6ec <oled_putc+0x20>
     6ea:	80 5a       	subi	r24, 0xA0	; 160
	oled_putc_raw(c);
     6ec:	0e 94 42 03 	call	0x684	; 0x684 <oled_putc_raw>
}
     6f0:	08 95       	ret

000006f2 <oled_home>:

void oled_home() {
	oled_write(0, 0x21); // column range
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	61 e2       	ldi	r22, 0x21	; 33
     6f6:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x00); //  set start to 0
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x7F); //  set end to 0x7F
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	6f e7       	ldi	r22, 0x7F	; 127
     706:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x22); // row range
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	62 e2       	ldi	r22, 0x22	; 34
     70e:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x00); //  set start to 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x07); //  set end to 0x07
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	67 e0       	ldi	r22, 0x07	; 7
     71e:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
}
     722:	08 95       	ret

00000724 <oled_move_raw>:

void oled_move_raw(uint8_t row, uint8_t col) {
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	d8 2f       	mov	r29, r24
     72a:	c6 2f       	mov	r28, r22
	if(col > 127) { col = 127; }
     72c:	66 23       	and	r22, r22
     72e:	0c f4       	brge	.+2      	; 0x732 <oled_move_raw+0xe>
     730:	cf e7       	ldi	r28, 0x7F	; 127
	if(row > 7) { row = 7; }
	
	oled_write(0, 0x21);     // set column
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	61 e2       	ldi	r22, 0x21	; 33
     736:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, col);      // start = col
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	6c 2f       	mov	r22, r28
     73e:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x7F);     // end = col max
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	6f e7       	ldi	r22, 0x7F	; 127
     746:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x22);     // set row
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	62 e2       	ldi	r22, 0x22	; 34
     74e:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, row);      // start = row
     752:	6d 2f       	mov	r22, r29
     754:	d8 30       	cpi	r29, 0x08	; 8
     756:	08 f0       	brcs	.+2      	; 0x75a <oled_move_raw+0x36>
     758:	67 e0       	ldi	r22, 0x07	; 7
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
	oled_write(0, 0x07);     // end = row max
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	67 e0       	ldi	r22, 0x07	; 7
     764:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <oled_move>:

void oled_move(uint8_t row, uint8_t col) {
	if(col > 15) { col = 15; }
	if(row > 7) { row = 7; }
	
	oled_move_raw(row, col << 3);
     76e:	88 30       	cpi	r24, 0x08	; 8
     770:	08 f0       	brcs	.+2      	; 0x774 <oled_move+0x6>
     772:	87 e0       	ldi	r24, 0x07	; 7
     774:	60 31       	cpi	r22, 0x10	; 16
     776:	08 f0       	brcs	.+2      	; 0x77a <oled_move+0xc>
     778:	6f e0       	ldi	r22, 0x0F	; 15
     77a:	66 0f       	add	r22, r22
     77c:	66 0f       	add	r22, r22
     77e:	66 0f       	add	r22, r22
     780:	0e 94 92 03 	call	0x724	; 0x724 <oled_move_raw>
}
     784:	08 95       	ret

00000786 <oled_clear>:

void oled_clear() {
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
	oled_home();
     78a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <oled_home>
     78e:	c0 e0       	ldi	r28, 0x00	; 0
     790:	d4 e0       	ldi	r29, 0x04	; 4
	for(uint16_t i = 1024; i > 0; i--) {
		oled_write(1, 0x00);
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
     79a:	21 97       	sbiw	r28, 0x01	; 1
	oled_move_raw(row, col << 3);
}

void oled_clear() {
	oled_home();
	for(uint16_t i = 1024; i > 0; i--) {
     79c:	d1 f7       	brne	.-12     	; 0x792 <oled_clear+0xc>
		oled_write(1, 0x00);
	}	
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <oled_fill>:

void oled_fill(uint8_t row, uint8_t col, uint8_t count, uint8_t max, uint32_t pattern, int8_t pshift) {
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	d4 2e       	mov	r13, r20
     7be:	c2 2f       	mov	r28, r18
     7c0:	47 01       	movw	r8, r14
     7c2:	58 01       	movw	r10, r16
	oled_move(row, col);
     7c4:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
	uint8_t pstate = 0;
	for(max; max > 0; max--) {
     7c8:	cc 23       	and	r28, r28
     7ca:	d9 f1       	breq	.+118    	; 0x842 <oled_fill+0x9e>
	}	
}

void oled_fill(uint8_t row, uint8_t col, uint8_t count, uint8_t max, uint32_t pattern, int8_t pshift) {
	oled_move(row, col);
	uint8_t pstate = 0;
     7cc:	d0 e0       	ldi	r29, 0x00	; 0
			if(pshift < 0) {
				oled_write(1, (pattern >> (pstate++ << 3)) & 0xFF);
			} 
			else 
			{
				oled_write(1, (pattern >> (pstate++ + pshift)) & 0xFF);
     7ce:	0c 2d       	mov	r16, r12
     7d0:	11 27       	eor	r17, r17
     7d2:	07 fd       	sbrc	r16, 7
     7d4:	10 95       	com	r17

void oled_fill(uint8_t row, uint8_t col, uint8_t count, uint8_t max, uint32_t pattern, int8_t pshift) {
	oled_move(row, col);
	uint8_t pstate = 0;
	for(max; max > 0; max--) {
		if(count > max) {
     7d6:	cd 15       	cp	r28, r13
     7d8:	70 f5       	brcc	.+92     	; 0x836 <oled_fill+0x92>
			if(pshift < 0) {
     7da:	cc 20       	and	r12, r12
     7dc:	ac f4       	brge	.+42     	; 0x808 <oled_fill+0x64>
				oled_write(1, (pattern >> (pstate++ << 3)) & 0xFF);
     7de:	4d 2f       	mov	r20, r29
     7e0:	44 0f       	add	r20, r20
     7e2:	44 0f       	add	r20, r20
     7e4:	44 0f       	add	r20, r20
     7e6:	d5 01       	movw	r26, r10
     7e8:	c4 01       	movw	r24, r8
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <oled_fill+0x50>
     7ec:	b6 95       	lsr	r27
     7ee:	a7 95       	ror	r26
     7f0:	97 95       	ror	r25
     7f2:	87 95       	ror	r24
     7f4:	4a 95       	dec	r20
     7f6:	d2 f7       	brpl	.-12     	; 0x7ec <oled_fill+0x48>
     7f8:	ac 01       	movw	r20, r24
     7fa:	bd 01       	movw	r22, r26
     7fc:	df 5f       	subi	r29, 0xFF	; 255
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	64 2f       	mov	r22, r20
     802:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
     806:	13 c0       	rjmp	.+38     	; 0x82e <oled_fill+0x8a>
			} 
			else 
			{
				oled_write(1, (pattern >> (pstate++ + pshift)) & 0xFF);
     808:	a8 01       	movw	r20, r16
     80a:	4d 0f       	add	r20, r29
     80c:	51 1d       	adc	r21, r1
     80e:	d5 01       	movw	r26, r10
     810:	c4 01       	movw	r24, r8
     812:	04 c0       	rjmp	.+8      	; 0x81c <oled_fill+0x78>
     814:	b6 95       	lsr	r27
     816:	a7 95       	ror	r26
     818:	97 95       	ror	r25
     81a:	87 95       	ror	r24
     81c:	4a 95       	dec	r20
     81e:	d2 f7       	brpl	.-12     	; 0x814 <oled_fill+0x70>
     820:	ac 01       	movw	r20, r24
     822:	bd 01       	movw	r22, r26
     824:	df 5f       	subi	r29, 0xFF	; 255
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	64 2f       	mov	r22, r20
     82a:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
			}			
			pstate = (pstate > 3) ? 0 : pstate;
     82e:	d4 30       	cpi	r29, 0x04	; 4
     830:	30 f0       	brcs	.+12     	; 0x83e <oled_fill+0x9a>
     832:	d0 e0       	ldi	r29, 0x00	; 0
     834:	04 c0       	rjmp	.+8      	; 0x83e <oled_fill+0x9a>
		}
		else {
			oled_write(1, 0x00);
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	0e 94 77 02 	call	0x4ee	; 0x4ee <oled_write>
}

void oled_fill(uint8_t row, uint8_t col, uint8_t count, uint8_t max, uint32_t pattern, int8_t pshift) {
	oled_move(row, col);
	uint8_t pstate = 0;
	for(max; max > 0; max--) {
     83e:	c1 50       	subi	r28, 0x01	; 1
     840:	51 f6       	brne	.-108    	; 0x7d6 <oled_fill+0x32>
		else {
			oled_write(1, 0x00);
		}		
	}
	
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	08 95       	ret

0000085c <oled_putxy>:

// Draw a tile at an arbitrary pixel location (top, left) using an 8 byte tile buffer referenced by *tile.
// Slower than oled_putc(), potentially substantially so; only use for things that need
// finer grained positioning than is possible with tile cells, like sprites.
// Clips right and bottom edges properly; untested and not expected to work with negative positions.
void oled_putxy(uint8_t left_pxl, uint8_t top_pxl, uint8_t *tile) {
     85c:	8f 92       	push	r8
     85e:	9f 92       	push	r9
     860:	af 92       	push	r10
     862:	bf 92       	push	r11
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	60 97       	sbiw	r28, 0x10	; 16
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	f8 2e       	mov	r15, r24
     886:	e6 2e       	mov	r14, r22
     888:	14 2f       	mov	r17, r20
     88a:	05 2f       	mov	r16, r21
	uint8_t tbuf[8], obuf[8];
	uint8_t top_cell = top_pxl >> 3;
     88c:	b6 2e       	mov	r11, r22
     88e:	b6 94       	lsr	r11
     890:	b6 94       	lsr	r11
     892:	b6 94       	lsr	r11
	uint8_t left_cell = left_pxl >> 3;
     894:	68 2f       	mov	r22, r24
     896:	66 95       	lsr	r22
     898:	66 95       	lsr	r22
     89a:	66 95       	lsr	r22
	int8_t voff = top_pxl - ((top_cell << 3) - 1);
     89c:	7e 2d       	mov	r23, r14
     89e:	7f 5f       	subi	r23, 0xFF	; 255
     8a0:	8b 2d       	mov	r24, r11
     8a2:	88 0f       	add	r24, r24
     8a4:	88 0f       	add	r24, r24
     8a6:	88 0f       	add	r24, r24
     8a8:	78 1b       	sub	r23, r24
	int8_t hoff = left_pxl - ((left_cell << 3) - 1);
     8aa:	af 2c       	mov	r10, r15
     8ac:	a3 94       	inc	r10
     8ae:	86 2f       	mov	r24, r22
     8b0:	88 0f       	add	r24, r24
     8b2:	88 0f       	add	r24, r24
     8b4:	88 0f       	add	r24, r24
     8b6:	a8 1a       	sub	r10, r24
	
	if(voff == 0 && hoff == 0) {
     8b8:	77 23       	and	r23, r23
     8ba:	59 f4       	brne	.+22     	; 0x8d2 <oled_putxy+0x76>
     8bc:	aa 20       	and	r10, r10
     8be:	49 f4       	brne	.+18     	; 0x8d2 <oled_putxy+0x76>
		oled_move(top_cell, left_pxl >> 3);
     8c0:	8b 2d       	mov	r24, r11
     8c2:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
		oled_put_tile(tile, 8);
     8c6:	81 2f       	mov	r24, r17
     8c8:	90 2f       	mov	r25, r16
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	0e 94 29 03 	call	0x652	; 0x652 <oled_put_tile>
		return;
     8d0:	4c c0       	rjmp	.+152    	; 0x96a <oled_putxy+0x10e>
     8d2:	41 2f       	mov	r20, r17
     8d4:	50 2f       	mov	r21, r16
     8d6:	fe 01       	movw	r30, r28
     8d8:	31 96       	adiw	r30, 0x01	; 1
     8da:	0f 2e       	mov	r0, r31
     8dc:	f9 e0       	ldi	r31, 0x09	; 9
     8de:	8f 2e       	mov	r8, r31
     8e0:	99 24       	eor	r9, r9
     8e2:	f0 2d       	mov	r31, r0
     8e4:	8c 0e       	add	r8, r28
     8e6:	9d 1e       	adc	r9, r29

// Draw a tile at an arbitrary pixel location (top, left) using an 8 byte tile buffer referenced by *tile.
// Slower than oled_putc(), potentially substantially so; only use for things that need
// finer grained positioning than is possible with tile cells, like sprites.
// Clips right and bottom edges properly; untested and not expected to work with negative positions.
void oled_putxy(uint8_t left_pxl, uint8_t top_pxl, uint8_t *tile) {
     8e8:	84 01       	movw	r16, r8
		return;
	}
	else {
		for(uint8_t tcol = 0; tcol < 8; tcol++) { // tile column
			tbuf[tcol] = (tile[tcol]) << ((uint8_t)voff); // shift left (down) by voff
			obuf[tcol] = (tile[tcol]) >> (8 - (uint8_t)voff); //shift right (up) by voff
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	6c 01       	movw	r12, r24
     8f0:	c7 1a       	sub	r12, r23
     8f2:	d1 08       	sbc	r13, r1
		oled_put_tile(tile, 8);
		return;
	}
	else {
		for(uint8_t tcol = 0; tcol < 8; tcol++) { // tile column
			tbuf[tcol] = (tile[tcol]) << ((uint8_t)voff); // shift left (down) by voff
     8f4:	da 01       	movw	r26, r20
     8f6:	2d 91       	ld	r18, X+
     8f8:	ad 01       	movw	r20, r26
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	c9 01       	movw	r24, r18
     8fe:	07 2e       	mov	r0, r23
     900:	02 c0       	rjmp	.+4      	; 0x906 <oled_putxy+0xaa>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	0a 94       	dec	r0
     908:	e2 f7       	brpl	.-8      	; 0x902 <oled_putxy+0xa6>
     90a:	81 93       	st	Z+, r24
			obuf[tcol] = (tile[tcol]) >> (8 - (uint8_t)voff); //shift right (up) by voff
     90c:	c9 01       	movw	r24, r18
     90e:	0c 2c       	mov	r0, r12
     910:	02 c0       	rjmp	.+4      	; 0x916 <oled_putxy+0xba>
     912:	95 95       	asr	r25
     914:	87 95       	ror	r24
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <oled_putxy+0xb6>
     91a:	d4 01       	movw	r26, r8
     91c:	8d 93       	st	X+, r24
     91e:	4d 01       	movw	r8, r26
		oled_move(top_cell, left_pxl >> 3);
		oled_put_tile(tile, 8);
		return;
	}
	else {
		for(uint8_t tcol = 0; tcol < 8; tcol++) { // tile column
     920:	e0 17       	cp	r30, r16
     922:	f1 07       	cpc	r31, r17
     924:	39 f7       	brne	.-50     	; 0x8f4 <oled_putxy+0x98>
			tbuf[tcol] = (tile[tcol]) << ((uint8_t)voff); // shift left (down) by voff
			obuf[tcol] = (tile[tcol]) >> (8 - (uint8_t)voff); //shift right (up) by voff
		}
		
		oled_move_raw(top_cell, left_pxl); // move_raw(row[0:7], column[0:127]) rows and pixels for extra confusion
     926:	8b 2d       	mov	r24, r11
     928:	6f 2d       	mov	r22, r15
     92a:	0e 94 92 03 	call	0x724	; 0x724 <oled_move_raw>
		oled_put_tile(&tbuf, (left_pxl > (SS1306_OLED_GEOM_W - 8)) ? 8 - hoff : 8);
     92e:	b8 e7       	ldi	r27, 0x78	; 120
     930:	bf 15       	cp	r27, r15
     932:	18 f4       	brcc	.+6      	; 0x93a <oled_putxy+0xde>
     934:	68 e0       	ldi	r22, 0x08	; 8
     936:	6a 19       	sub	r22, r10
     938:	01 c0       	rjmp	.+2      	; 0x93c <oled_putxy+0xe0>
     93a:	68 e0       	ldi	r22, 0x08	; 8
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 29 03 	call	0x652	; 0x652 <oled_put_tile>
		if(top_pxl < (SS1306_OLED_GEOM_H - 8)) {
     944:	87 e3       	ldi	r24, 0x37	; 55
     946:	8e 15       	cp	r24, r14
     948:	80 f0       	brcs	.+32     	; 0x96a <oled_putxy+0x10e>
			oled_move_raw((top_cell + 1), left_pxl);
     94a:	8b 2d       	mov	r24, r11
     94c:	8f 5f       	subi	r24, 0xFF	; 255
     94e:	6f 2d       	mov	r22, r15
     950:	0e 94 92 03 	call	0x724	; 0x724 <oled_move_raw>
			oled_put_tile(&obuf, (left_pxl > (SS1306_OLED_GEOM_W - 8)) ? 8 - hoff : 8);
     954:	a8 e7       	ldi	r26, 0x78	; 120
     956:	af 15       	cp	r26, r15
     958:	18 f4       	brcc	.+6      	; 0x960 <oled_putxy+0x104>
     95a:	68 e0       	ldi	r22, 0x08	; 8
     95c:	6a 19       	sub	r22, r10
     95e:	01 c0       	rjmp	.+2      	; 0x962 <oled_putxy+0x106>
     960:	68 e0       	ldi	r22, 0x08	; 8
     962:	ce 01       	movw	r24, r28
     964:	09 96       	adiw	r24, 0x09	; 9
     966:	0e 94 29 03 	call	0x652	; 0x652 <oled_put_tile>
		}		
	}	
}
     96a:	60 96       	adiw	r28, 0x10	; 16
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	08 95       	ret

00000990 <oled_puts>:

void oled_puts(char *str) {
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	ec 01       	movw	r28, r24
	while(*str != 0) {
     996:	88 81       	ld	r24, Y
     998:	88 23       	and	r24, r24
     99a:	31 f0       	breq	.+12     	; 0x9a8 <oled_puts+0x18>
			oled_put_tile(&obuf, (left_pxl > (SS1306_OLED_GEOM_W - 8)) ? 8 - hoff : 8);
		}		
	}	
}

void oled_puts(char *str) {
     99c:	21 96       	adiw	r28, 0x01	; 1
	while(*str != 0) {
		oled_putc(*str++);
     99e:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
		}		
	}	
}

void oled_puts(char *str) {
	while(*str != 0) {
     9a2:	89 91       	ld	r24, Y+
     9a4:	88 23       	and	r24, r24
     9a6:	d9 f7       	brne	.-10     	; 0x99e <oled_puts+0xe>
		oled_putc(*str++);
	}
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <oled_bigdigit>:

// box graphics digit
void oled_bigdigit(uint8_t top, uint8_t left, uint8_t num) {
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	ec 97       	sbiw	r28, 0x3c	; 60
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	e8 2e       	mov	r14, r24
     9ce:	d6 2e       	mov	r13, r22
     9d0:	04 2f       	mov	r16, r20
	const uint8_t chartable[] PROGMEM = { 0x10, 0x0E, 0x5D, 0x5D, 0x0D, 0x1D, // zero
     9d2:	de 01       	movw	r26, r28
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	e0 e0       	ldi	r30, 0x00	; 0
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	8c e3       	ldi	r24, 0x3C	; 60
     9dc:	01 90       	ld	r0, Z+
     9de:	0d 92       	st	X+, r0
     9e0:	81 50       	subi	r24, 0x01	; 1
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <oled_bigdigit+0x2e>
							              0x10, 0x0E, 0x0B, 0x0E, 0x0D, 0x1D, // six
							              0x10, 0x0E, 0x20, 0x5B, 0x20, 0x5E, // seven
							              0x10, 0x0E, 0x0B, 0x13, 0x0D, 0x1D, // eight
							              0x10, 0x0E, 0x0d, 0x13, 0x0D, 0x1D  // nine
						                };
	if(num > 9) { return; }
     9e4:	0a 30       	cpi	r16, 0x0A	; 10
     9e6:	48 f5       	brcc	.+82     	; 0xa3a <oled_bigdigit+0x8c>
	oled_move(top, left);
     9e8:	8e 2d       	mov	r24, r14
     9ea:	6d 2d       	mov	r22, r13
     9ec:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
	for(uint8_t i = 0; i < 6; i++) {
		if(i == 2 || i == 4) { oled_move(++top, left); }
		oled_putc(chartable[(num * 6) + i]);
     9f0:	80 2f       	mov	r24, r16
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8c 01       	movw	r16, r24
     9f6:	00 0f       	add	r16, r16
     9f8:	11 1f       	adc	r17, r17
     9fa:	80 0f       	add	r24, r16
     9fc:	91 1f       	adc	r25, r17
     9fe:	8c 01       	movw	r16, r24
     a00:	00 0f       	add	r16, r16
     a02:	11 1f       	adc	r17, r17
		oled_putc(*str++);
	}
}

// box graphics digit
void oled_bigdigit(uint8_t top, uint8_t left, uint8_t num) {
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	8c 0f       	add	r24, r28
     a0a:	9d 1f       	adc	r25, r29
     a0c:	08 0f       	add	r16, r24
     a0e:	19 1f       	adc	r17, r25
							              0x10, 0x0E, 0x0B, 0x13, 0x0D, 0x1D, // eight
							              0x10, 0x0E, 0x0d, 0x13, 0x0D, 0x1D  // nine
						                };
	if(num > 9) { return; }
	oled_move(top, left);
	for(uint8_t i = 0; i < 6; i++) {
     a10:	ff 24       	eor	r15, r15
		if(i == 2 || i == 4) { oled_move(++top, left); }
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	f9 16       	cp	r15, r25
     a16:	19 f0       	breq	.+6      	; 0xa1e <oled_bigdigit+0x70>
     a18:	e4 e0       	ldi	r30, 0x04	; 4
     a1a:	fe 16       	cp	r15, r30
     a1c:	29 f4       	brne	.+10     	; 0xa28 <oled_bigdigit+0x7a>
     a1e:	e3 94       	inc	r14
     a20:	8e 2d       	mov	r24, r14
     a22:	6d 2d       	mov	r22, r13
     a24:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
		oled_putc(chartable[(num * 6) + i]);
     a28:	f8 01       	movw	r30, r16
     a2a:	81 91       	ld	r24, Z+
     a2c:	8f 01       	movw	r16, r30
     a2e:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
							              0x10, 0x0E, 0x0B, 0x13, 0x0D, 0x1D, // eight
							              0x10, 0x0E, 0x0d, 0x13, 0x0D, 0x1D  // nine
						                };
	if(num > 9) { return; }
	oled_move(top, left);
	for(uint8_t i = 0; i < 6; i++) {
     a32:	f3 94       	inc	r15
     a34:	f6 e0       	ldi	r31, 0x06	; 6
     a36:	ff 16       	cp	r15, r31
     a38:	61 f7       	brne	.-40     	; 0xa12 <oled_bigdigit+0x64>
		if(i == 2 || i == 4) { oled_move(++top, left); }
		oled_putc(chartable[(num * 6) + i]);
	}		
		
}
     a3a:	ec 96       	adiw	r28, 0x3c	; 60
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	08 95       	ret

00000a56 <oled_box>:

void oled_slider(uint8_t row, uint8_t col, uint8_t step) {
	
}
*/
void oled_box(uint8_t top, uint8_t left, uint8_t width, uint8_t height) {
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	e8 2e       	mov	r14, r24
     a6a:	f6 2e       	mov	r15, r22
     a6c:	d4 2f       	mov	r29, r20
     a6e:	b2 2e       	mov	r11, r18
	oled_move(top, left);
     a70:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
	oled_putc(BOX_TL); for(uint8_t i = 0; i < width - 2; i++) { oled_putc(BOX_HL);} oled_putc(BOX_TR);
     a74:	80 e1       	ldi	r24, 0x10	; 16
     a76:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
     a7a:	0d 2f       	mov	r16, r29
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	02 50       	subi	r16, 0x02	; 2
     a80:	10 40       	sbci	r17, 0x00	; 0
     a82:	10 16       	cp	r1, r16
     a84:	11 06       	cpc	r1, r17
     a86:	54 f4       	brge	.+20     	; 0xa9c <oled_box+0x46>
     a88:	c0 e0       	ldi	r28, 0x00	; 0
     a8a:	80 e4       	ldi	r24, 0x40	; 64
     a8c:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
     a90:	cf 5f       	subi	r28, 0xFF	; 255
     a92:	8c 2f       	mov	r24, r28
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	80 17       	cp	r24, r16
     a98:	91 07       	cpc	r25, r17
     a9a:	bc f3       	brlt	.-18     	; 0xa8a <oled_box+0x34>
     a9c:	8e e0       	ldi	r24, 0x0E	; 14
     a9e:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
	for(uint8_t i = top+1; i < top+height-1; i++) {
     aa2:	ce 2d       	mov	r28, r14
     aa4:	cf 5f       	subi	r28, 0xFF	; 255
     aa6:	cb 2c       	mov	r12, r11
     aa8:	dd 24       	eor	r13, r13
     aaa:	ce 0c       	add	r12, r14
     aac:	d1 1c       	adc	r13, r1
     aae:	08 94       	sec
     ab0:	c1 08       	sbc	r12, r1
     ab2:	d1 08       	sbc	r13, r1
     ab4:	8c 2f       	mov	r24, r28
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	8c 15       	cp	r24, r12
     aba:	9d 05       	cpc	r25, r13
     abc:	bc f4       	brge	.+46     	; 0xaec <oled_box+0x96>
		oled_move(i, left); 
		oled_putc(BOX_VL); 
		oled_move(i, left + width - 1);
     abe:	8f 2d       	mov	r24, r15
     ac0:	81 50       	subi	r24, 0x01	; 1
     ac2:	d8 0f       	add	r29, r24
*/
void oled_box(uint8_t top, uint8_t left, uint8_t width, uint8_t height) {
	oled_move(top, left);
	oled_putc(BOX_TL); for(uint8_t i = 0; i < width - 2; i++) { oled_putc(BOX_HL);} oled_putc(BOX_TR);
	for(uint8_t i = top+1; i < top+height-1; i++) {
		oled_move(i, left); 
     ac4:	8c 2f       	mov	r24, r28
     ac6:	6f 2d       	mov	r22, r15
     ac8:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
		oled_putc(BOX_VL); 
     acc:	8d e5       	ldi	r24, 0x5D	; 93
     ace:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
		oled_move(i, left + width - 1);
     ad2:	8c 2f       	mov	r24, r28
     ad4:	6d 2f       	mov	r22, r29
     ad6:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
		oled_putc(BOX_VL);
     ada:	8d e5       	ldi	r24, 0x5D	; 93
     adc:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
}
*/
void oled_box(uint8_t top, uint8_t left, uint8_t width, uint8_t height) {
	oled_move(top, left);
	oled_putc(BOX_TL); for(uint8_t i = 0; i < width - 2; i++) { oled_putc(BOX_HL);} oled_putc(BOX_TR);
	for(uint8_t i = top+1; i < top+height-1; i++) {
     ae0:	cf 5f       	subi	r28, 0xFF	; 255
     ae2:	8c 2f       	mov	r24, r28
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	8c 15       	cp	r24, r12
     ae8:	9d 05       	cpc	r25, r13
     aea:	64 f3       	brlt	.-40     	; 0xac4 <oled_box+0x6e>
		oled_move(i, left); 
		oled_putc(BOX_VL); 
		oled_move(i, left + width - 1);
		oled_putc(BOX_VL);
	}
	oled_move(top + height - 1, left);
     aec:	8e 2d       	mov	r24, r14
     aee:	81 50       	subi	r24, 0x01	; 1
     af0:	8b 0d       	add	r24, r11
     af2:	6f 2d       	mov	r22, r15
     af4:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
	oled_putc(BOX_BL); for(uint8_t i = 0; i < width - 2; i++) { oled_putc(BOX_HL);} oled_putc(BOX_BR);		
     af8:	8d e0       	ldi	r24, 0x0D	; 13
     afa:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
     afe:	10 16       	cp	r1, r16
     b00:	11 06       	cpc	r1, r17
     b02:	54 f4       	brge	.+20     	; 0xb18 <oled_box+0xc2>
     b04:	c0 e0       	ldi	r28, 0x00	; 0
     b06:	80 e4       	ldi	r24, 0x40	; 64
     b08:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
     b0c:	cf 5f       	subi	r28, 0xFF	; 255
     b0e:	8c 2f       	mov	r24, r28
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	80 17       	cp	r24, r16
     b14:	91 07       	cpc	r25, r17
     b16:	bc f3       	brlt	.-18     	; 0xb06 <oled_box+0xb0>
     b18:	8d e1       	ldi	r24, 0x1D	; 29
     b1a:	0e 94 66 03 	call	0x6cc	; 0x6cc <oled_putc>
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	08 95       	ret

00000b32 <main>:
} ball_pos, ball_vel;

float grav = 0.1;

int main(void)
{
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	60 97       	sbiw	r28, 0x10	; 16
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
	DDRB |= SS1306_OLED_PORTB_MASK;
     b46:	62 9a       	sbi	0x0c, 2	; 12
	DDRC |= SS1306_OLED_PORTC_MASK;
     b48:	88 b1       	in	r24, 0x08	; 8
     b4a:	86 63       	ori	r24, 0x36	; 54
     b4c:	88 b9       	out	0x08, r24	; 8
	
	oled_init();
     b4e:	0e 94 96 02 	call	0x52c	; 0x52c <oled_init>
	oled_clear();
     b52:	0e 94 c3 03 	call	0x786	; 0x786 <oled_clear>
	uint8_t shift = 0;
	uint8_t ctr = 0;
	uint8_t px = 0, py = 0;
	uint8_t blank[] = {0, 0, 0, 0, 0, 0, 0, 0};
     b56:	fe 01       	movw	r30, r28
     b58:	31 96       	adiw	r30, 0x01	; 1
     b5a:	88 e0       	ldi	r24, 0x08	; 8
     b5c:	df 01       	movw	r26, r30
     b5e:	1d 92       	st	X+, r1
     b60:	8a 95       	dec	r24
     b62:	e9 f7       	brne	.-6      	; 0xb5e <main+0x2c>
	uint8_t ball[]  = {0x00, 0x3C, 0x7E, 0x7E, 0x7E, 0x7E, 0x3C, 0x00};
     b64:	de 01       	movw	r26, r28
     b66:	19 96       	adiw	r26, 0x09	; 9
     b68:	ed e4       	ldi	r30, 0x4D	; 77
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	81 50       	subi	r24, 0x01	; 1
     b74:	e1 f7       	brne	.-8      	; 0xb6e <main+0x3c>
	ball_pos.x = (float)(rand() >> 26);
     b76:	0e 94 b3 09 	call	0x1366	; 0x1366 <rand>
     b7a:	bc 01       	movw	r22, r24
     b7c:	77 0f       	add	r23, r23
     b7e:	66 0b       	sbc	r22, r22
     b80:	76 2f       	mov	r23, r22
     b82:	88 27       	eor	r24, r24
     b84:	77 fd       	sbrc	r23, 7
     b86:	80 95       	com	r24
     b88:	98 2f       	mov	r25, r24
     b8a:	0e 94 43 08 	call	0x1086	; 0x1086 <__floatsisf>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	80 93 66 01 	sts	0x0166, r24
     b96:	90 93 67 01 	sts	0x0167, r25
     b9a:	a0 93 68 01 	sts	0x0168, r26
     b9e:	b0 93 69 01 	sts	0x0169, r27
	ball_pos.y = 0;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	dc 01       	movw	r26, r24
     ba8:	80 93 6a 01 	sts	0x016A, r24
     bac:	90 93 6b 01 	sts	0x016B, r25
     bb0:	a0 93 6c 01 	sts	0x016C, r26
     bb4:	b0 93 6d 01 	sts	0x016D, r27
	ball_vel.x = (5.0F / (rand() & 0xFF)) + 2.5;
     bb8:	0e 94 b3 09 	call	0x1366	; 0x1366 <rand>
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	0e 94 43 08 	call	0x1086	; 0x1086 <__floatsisf>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 ea       	ldi	r24, 0xA0	; 160
     bd4:	90 e4       	ldi	r25, 0x40	; 64
     bd6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__divsf3>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e2       	ldi	r20, 0x20	; 32
     be0:	50 e4       	ldi	r21, 0x40	; 64
     be2:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	80 93 5e 01 	sts	0x015E, r24
     bee:	90 93 5f 01 	sts	0x015F, r25
     bf2:	a0 93 60 01 	sts	0x0160, r26
     bf6:	b0 93 61 01 	sts	0x0161, r27
	
	oled_init();
	oled_clear();
	uint8_t shift = 0;
	uint8_t ctr = 0;
	uint8_t px = 0, py = 0;
     bfa:	99 24       	eor	r9, r9
     bfc:	88 24       	eor	r8, r8
	ball_pos.y = 0;
	ball_vel.x = (5.0F / (rand() & 0xFF)) + 2.5;

    while(1)
    {
		ball_vel.y += grav;
     bfe:	0f 2e       	mov	r0, r31
     c00:	f2 e6       	ldi	r31, 0x62	; 98
     c02:	4f 2e       	mov	r4, r31
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	5f 2e       	mov	r5, r31
     c08:	f0 2d       	mov	r31, r0
		ball_pos.x += ball_vel.x;
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f6 e6       	ldi	r31, 0x66	; 102
     c0e:	6f 2e       	mov	r6, r31
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	7f 2e       	mov	r7, r31
     c14:	f0 2d       	mov	r31, r0
		else if(ball_pos.x < 0) {
			ball_pos.x = 0;
			ball_vel.x *= -1;
		}
		
		if(ball_pos.y > SS1306_OLED_GEOM_H - 8) {
     c16:	0f 2e       	mov	r0, r31
     c18:	fa e6       	ldi	r31, 0x6A	; 106
     c1a:	2f 2e       	mov	r2, r31
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	3f 2e       	mov	r3, r31
     c20:	f0 2d       	mov	r31, r0
	ball_pos.y = 0;
	ball_vel.x = (5.0F / (rand() & 0xFF)) + 2.5;

    while(1)
    {
		ball_vel.y += grav;
     c22:	f2 01       	movw	r30, r4
     c24:	60 81       	ld	r22, Z
     c26:	71 81       	ldd	r23, Z+1	; 0x01
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	20 91 55 01 	lds	r18, 0x0155
     c30:	30 91 56 01 	lds	r19, 0x0156
     c34:	40 91 57 01 	lds	r20, 0x0157
     c38:	50 91 58 01 	lds	r21, 0x0158
     c3c:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     c40:	16 2f       	mov	r17, r22
     c42:	07 2f       	mov	r16, r23
     c44:	f8 2e       	mov	r15, r24
     c46:	e9 2e       	mov	r14, r25
     c48:	86 2f       	mov	r24, r22
     c4a:	90 2f       	mov	r25, r16
     c4c:	af 2d       	mov	r26, r15
     c4e:	be 2d       	mov	r27, r14
     c50:	f2 01       	movw	r30, r4
     c52:	80 83       	st	Z, r24
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	a2 83       	std	Z+2, r26	; 0x02
     c58:	b3 83       	std	Z+3, r27	; 0x03
		ball_pos.x += ball_vel.x;
     c5a:	d3 01       	movw	r26, r6
     c5c:	6d 91       	ld	r22, X+
     c5e:	7d 91       	ld	r23, X+
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	ee e5       	ldi	r30, 0x5E	; 94
     c66:	f1 e0       	ldi	r31, 0x01	; 1
     c68:	20 81       	ld	r18, Z
     c6a:	31 81       	ldd	r19, Z+1	; 0x01
     c6c:	42 81       	ldd	r20, Z+2	; 0x02
     c6e:	53 81       	ldd	r21, Z+3	; 0x03
     c70:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     c74:	d6 2e       	mov	r13, r22
     c76:	c7 2e       	mov	r12, r23
     c78:	b8 2e       	mov	r11, r24
     c7a:	a9 2e       	mov	r10, r25
     c7c:	86 2f       	mov	r24, r22
     c7e:	9c 2d       	mov	r25, r12
     c80:	ab 2d       	mov	r26, r11
     c82:	ba 2d       	mov	r27, r10
     c84:	f3 01       	movw	r30, r6
     c86:	80 83       	st	Z, r24
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	a2 83       	std	Z+2, r26	; 0x02
     c8c:	b3 83       	std	Z+3, r27	; 0x03
		ball_pos.y += ball_vel.y;
     c8e:	81 2f       	mov	r24, r17
     c90:	90 2f       	mov	r25, r16
     c92:	af 2d       	mov	r26, r15
     c94:	be 2d       	mov	r27, r14
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	aa e6       	ldi	r26, 0x6A	; 106
     c9c:	b1 e0       	ldi	r27, 0x01	; 1
     c9e:	2d 91       	ld	r18, X+
     ca0:	3d 91       	ld	r19, X+
     ca2:	4d 91       	ld	r20, X+
     ca4:	5c 91       	ld	r21, X
     ca6:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     caa:	16 2f       	mov	r17, r22
     cac:	07 2f       	mov	r16, r23
     cae:	f8 2e       	mov	r15, r24
     cb0:	e9 2e       	mov	r14, r25
     cb2:	86 2f       	mov	r24, r22
     cb4:	90 2f       	mov	r25, r16
     cb6:	af 2d       	mov	r26, r15
     cb8:	be 2d       	mov	r27, r14
     cba:	ea e6       	ldi	r30, 0x6A	; 106
     cbc:	f1 e0       	ldi	r31, 0x01	; 1
     cbe:	80 83       	st	Z, r24
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	a2 83       	std	Z+2, r26	; 0x02
     cc4:	b3 83       	std	Z+3, r27	; 0x03
		uint8_t x = (uint8_t)ball_pos.x;
     cc6:	8d 2d       	mov	r24, r13
     cc8:	9c 2d       	mov	r25, r12
     cca:	ab 2d       	mov	r26, r11
     ccc:	ba 2d       	mov	r27, r10
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	0e 94 15 08 	call	0x102a	; 0x102a <__fixunssfsi>
     cd6:	b6 2e       	mov	r11, r22
		uint8_t y = (uint8_t)ball_pos.y;
     cd8:	81 2f       	mov	r24, r17
     cda:	90 2f       	mov	r25, r16
     cdc:	af 2d       	mov	r26, r15
     cde:	be 2d       	mov	r27, r14
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 15 08 	call	0x102a	; 0x102a <__fixunssfsi>
     ce8:	16 2f       	mov	r17, r22
		
		oled_move(7, 0);
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_move>
		oled_puts("STRAIGHT BALLIN'");
     cf2:	8c e3       	ldi	r24, 0x3C	; 60
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 c8 04 	call	0x990	; 0x990 <oled_puts>
		
		oled_putxy(px, py, &blank);
     cfa:	88 2d       	mov	r24, r8
     cfc:	69 2d       	mov	r22, r9
     cfe:	ae 01       	movw	r20, r28
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	0e 94 2e 04 	call	0x85c	; 0x85c <oled_putxy>
		oled_putxy(x, y, &ball);
     d08:	8b 2d       	mov	r24, r11
     d0a:	61 2f       	mov	r22, r17
     d0c:	ae 01       	movw	r20, r28
     d0e:	47 5f       	subi	r20, 0xF7	; 247
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	0e 94 2e 04 	call	0x85c	; 0x85c <oled_putxy>
		px = x;
		py = y;
		
		if(ball_pos.x > SS1306_OLED_GEOM_W - 8) {
     d16:	d3 01       	movw	r26, r6
     d18:	cd 90       	ld	r12, X+
     d1a:	dd 90       	ld	r13, X+
     d1c:	ed 90       	ld	r14, X+
     d1e:	fc 90       	ld	r15, X
     d20:	c7 01       	movw	r24, r14
     d22:	b6 01       	movw	r22, r12
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 ef       	ldi	r20, 0xF0	; 240
     d2a:	52 e4       	ldi	r21, 0x42	; 66
     d2c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__gesf2>
     d30:	18 16       	cp	r1, r24
     d32:	ac f4       	brge	.+42     	; 0xd5e <main+0x22c>
			ball_pos.x = SS1306_OLED_GEOM_W - 8;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 ef       	ldi	r26, 0xF0	; 240
     d3a:	b2 e4       	ldi	r27, 0x42	; 66
     d3c:	f3 01       	movw	r30, r6
     d3e:	80 83       	st	Z, r24
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	b3 83       	std	Z+3, r27	; 0x03
			ball_vel.x *= -1;
     d46:	ee e5       	ldi	r30, 0x5E	; 94
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	a2 81       	ldd	r26, Z+2	; 0x02
     d50:	b3 81       	ldd	r27, Z+3	; 0x03
     d52:	b0 58       	subi	r27, 0x80	; 128
     d54:	80 83       	st	Z, r24
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	a2 83       	std	Z+2, r26	; 0x02
     d5a:	b3 83       	std	Z+3, r27	; 0x03
     d5c:	1c c0       	rjmp	.+56     	; 0xd96 <main+0x264>
		}
		else if(ball_pos.x < 0) {
     d5e:	c7 01       	movw	r24, r14
     d60:	b6 01       	movw	r22, r12
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a9 01       	movw	r20, r18
     d68:	0e 94 a9 07 	call	0xf52	; 0xf52 <__cmpsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	9c f4       	brge	.+38     	; 0xd96 <main+0x264>
			ball_pos.x = 0;
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	dc 01       	movw	r26, r24
     d76:	f3 01       	movw	r30, r6
     d78:	80 83       	st	Z, r24
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	a2 83       	std	Z+2, r26	; 0x02
     d7e:	b3 83       	std	Z+3, r27	; 0x03
			ball_vel.x *= -1;
     d80:	ee e5       	ldi	r30, 0x5E	; 94
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	a2 81       	ldd	r26, Z+2	; 0x02
     d8a:	b3 81       	ldd	r27, Z+3	; 0x03
     d8c:	b0 58       	subi	r27, 0x80	; 128
     d8e:	80 83       	st	Z, r24
     d90:	91 83       	std	Z+1, r25	; 0x01
     d92:	a2 83       	std	Z+2, r26	; 0x02
     d94:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		if(ball_pos.y > SS1306_OLED_GEOM_H - 8) {
     d96:	d1 01       	movw	r26, r2
     d98:	cd 90       	ld	r12, X+
     d9a:	dd 90       	ld	r13, X+
     d9c:	ed 90       	ld	r14, X+
     d9e:	fc 90       	ld	r15, X
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e6       	ldi	r20, 0x60	; 96
     daa:	52 e4       	ldi	r21, 0x42	; 66
     dac:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__gesf2>
     db0:	18 16       	cp	r1, r24
     db2:	e4 f4       	brge	.+56     	; 0xdec <main+0x2ba>
			ball_pos.y = SS1306_OLED_GEOM_H - 8;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e6       	ldi	r26, 0x60	; 96
     dba:	b2 e4       	ldi	r27, 0x42	; 66
     dbc:	f1 01       	movw	r30, r2
     dbe:	80 83       	st	Z, r24
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	a2 83       	std	Z+2, r26	; 0x02
     dc4:	b3 83       	std	Z+3, r27	; 0x03
			ball_vel.y *= -0.8;
     dc6:	d2 01       	movw	r26, r4
     dc8:	6d 91       	ld	r22, X+
     dca:	7d 91       	ld	r23, X+
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	2d ec       	ldi	r18, 0xCD	; 205
     dd2:	3c ec       	ldi	r19, 0xCC	; 204
     dd4:	4c e4       	ldi	r20, 0x4C	; 76
     dd6:	5f eb       	ldi	r21, 0xBF	; 191
     dd8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	f2 01       	movw	r30, r4
     de2:	80 83       	st	Z, r24
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	a2 83       	std	Z+2, r26	; 0x02
     de8:	b3 83       	std	Z+3, r27	; 0x03
     dea:	23 c0       	rjmp	.+70     	; 0xe32 <main+0x300>
		} 
		else if(ball_pos.y < 0) {
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	0e 94 a9 07 	call	0xf52	; 0xf52 <__cmpsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	d4 f4       	brge	.+52     	; 0xe32 <main+0x300>
			ball_pos.y = 0;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	dc 01       	movw	r26, r24
     e04:	f1 01       	movw	r30, r2
     e06:	80 83       	st	Z, r24
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	a2 83       	std	Z+2, r26	; 0x02
     e0c:	b3 83       	std	Z+3, r27	; 0x03
			ball_vel.y *= -0.8;
     e0e:	d2 01       	movw	r26, r4
     e10:	6d 91       	ld	r22, X+
     e12:	7d 91       	ld	r23, X+
     e14:	8d 91       	ld	r24, X+
     e16:	9c 91       	ld	r25, X
     e18:	2d ec       	ldi	r18, 0xCD	; 205
     e1a:	3c ec       	ldi	r19, 0xCC	; 204
     e1c:	4c e4       	ldi	r20, 0x4C	; 76
     e1e:	5f eb       	ldi	r21, 0xBF	; 191
     e20:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	f2 01       	movw	r30, r4
     e2a:	80 83       	st	Z, r24
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	a2 83       	std	Z+2, r26	; 0x02
     e30:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		if(ball_pos.y >=  SS1306_OLED_GEOM_H - 8 && ball_pos.x <= 0) {
     e32:	d1 01       	movw	r26, r2
     e34:	6d 91       	ld	r22, X+
     e36:	7d 91       	ld	r23, X+
     e38:	8d 91       	ld	r24, X+
     e3a:	9c 91       	ld	r25, X
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e6       	ldi	r20, 0x60	; 96
     e42:	52 e4       	ldi	r21, 0x42	; 66
     e44:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__gesf2>
     e48:	88 23       	and	r24, r24
     e4a:	ac f0       	brlt	.+42     	; 0xe76 <main+0x344>
     e4c:	f3 01       	movw	r30, r6
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	a9 01       	movw	r20, r18
     e5c:	0e 94 a9 07 	call	0xf52	; 0xf52 <__cmpsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f0       	brlt	.+18     	; 0xe76 <main+0x344>
			ball_vel.y = -3.0;
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e4       	ldi	r26, 0x40	; 64
     e6a:	b0 ec       	ldi	r27, 0xC0	; 192
     e6c:	f2 01       	movw	r30, r4
     e6e:	80 83       	st	Z, r24
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	a2 83       	std	Z+2, r26	; 0x02
     e74:	b3 83       	std	Z+3, r27	; 0x03
     e76:	83 ee       	ldi	r24, 0xE3	; 227
     e78:	97 e5       	ldi	r25, 0x57	; 87
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <main+0x348>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <main+0x34e>
     e80:	00 00       	nop
		oled_move(7, 0);
		oled_puts("STRAIGHT BALLIN'");
		
		oled_putxy(px, py, &blank);
		oled_putxy(x, y, &ball);
		px = x;
     e82:	8b 2c       	mov	r8, r11
		py = y;
     e84:	91 2e       	mov	r9, r17
     e86:	cd ce       	rjmp	.-614    	; 0xc22 <main+0xf0>

00000e88 <__subsf3>:
     e88:	50 58       	subi	r21, 0x80	; 128

00000e8a <__addsf3>:
     e8a:	bb 27       	eor	r27, r27
     e8c:	aa 27       	eor	r26, r26
     e8e:	0e d0       	rcall	.+28     	; 0xeac <__addsf3x>
     e90:	70 c1       	rjmp	.+736    	; 0x1172 <__fp_round>
     e92:	61 d1       	rcall	.+706    	; 0x1156 <__fp_pscA>
     e94:	30 f0       	brcs	.+12     	; 0xea2 <__addsf3+0x18>
     e96:	66 d1       	rcall	.+716    	; 0x1164 <__fp_pscB>
     e98:	20 f0       	brcs	.+8      	; 0xea2 <__addsf3+0x18>
     e9a:	31 f4       	brne	.+12     	; 0xea8 <__addsf3+0x1e>
     e9c:	9f 3f       	cpi	r25, 0xFF	; 255
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__addsf3+0x1a>
     ea0:	1e f4       	brtc	.+6      	; 0xea8 <__addsf3+0x1e>
     ea2:	56 c1       	rjmp	.+684    	; 0x1150 <__fp_nan>
     ea4:	0e f4       	brtc	.+2      	; 0xea8 <__addsf3+0x1e>
     ea6:	e0 95       	com	r30
     ea8:	e7 fb       	bst	r30, 7
     eaa:	4c c1       	rjmp	.+664    	; 0x1144 <__fp_inf>

00000eac <__addsf3x>:
     eac:	e9 2f       	mov	r30, r25
     eae:	72 d1       	rcall	.+740    	; 0x1194 <__fp_split3>
     eb0:	80 f3       	brcs	.-32     	; 0xe92 <__addsf3+0x8>
     eb2:	ba 17       	cp	r27, r26
     eb4:	62 07       	cpc	r22, r18
     eb6:	73 07       	cpc	r23, r19
     eb8:	84 07       	cpc	r24, r20
     eba:	95 07       	cpc	r25, r21
     ebc:	18 f0       	brcs	.+6      	; 0xec4 <__addsf3x+0x18>
     ebe:	71 f4       	brne	.+28     	; 0xedc <__addsf3x+0x30>
     ec0:	9e f5       	brtc	.+102    	; 0xf28 <__addsf3x+0x7c>
     ec2:	8a c1       	rjmp	.+788    	; 0x11d8 <__fp_zero>
     ec4:	0e f4       	brtc	.+2      	; 0xec8 <__addsf3x+0x1c>
     ec6:	e0 95       	com	r30
     ec8:	0b 2e       	mov	r0, r27
     eca:	ba 2f       	mov	r27, r26
     ecc:	a0 2d       	mov	r26, r0
     ece:	0b 01       	movw	r0, r22
     ed0:	b9 01       	movw	r22, r18
     ed2:	90 01       	movw	r18, r0
     ed4:	0c 01       	movw	r0, r24
     ed6:	ca 01       	movw	r24, r20
     ed8:	a0 01       	movw	r20, r0
     eda:	11 24       	eor	r1, r1
     edc:	ff 27       	eor	r31, r31
     ede:	59 1b       	sub	r21, r25
     ee0:	99 f0       	breq	.+38     	; 0xf08 <__addsf3x+0x5c>
     ee2:	59 3f       	cpi	r21, 0xF9	; 249
     ee4:	50 f4       	brcc	.+20     	; 0xefa <__addsf3x+0x4e>
     ee6:	50 3e       	cpi	r21, 0xE0	; 224
     ee8:	68 f1       	brcs	.+90     	; 0xf44 <__addsf3x+0x98>
     eea:	1a 16       	cp	r1, r26
     eec:	f0 40       	sbci	r31, 0x00	; 0
     eee:	a2 2f       	mov	r26, r18
     ef0:	23 2f       	mov	r18, r19
     ef2:	34 2f       	mov	r19, r20
     ef4:	44 27       	eor	r20, r20
     ef6:	58 5f       	subi	r21, 0xF8	; 248
     ef8:	f3 cf       	rjmp	.-26     	; 0xee0 <__addsf3x+0x34>
     efa:	46 95       	lsr	r20
     efc:	37 95       	ror	r19
     efe:	27 95       	ror	r18
     f00:	a7 95       	ror	r26
     f02:	f0 40       	sbci	r31, 0x00	; 0
     f04:	53 95       	inc	r21
     f06:	c9 f7       	brne	.-14     	; 0xefa <__addsf3x+0x4e>
     f08:	7e f4       	brtc	.+30     	; 0xf28 <__addsf3x+0x7c>
     f0a:	1f 16       	cp	r1, r31
     f0c:	ba 0b       	sbc	r27, r26
     f0e:	62 0b       	sbc	r22, r18
     f10:	73 0b       	sbc	r23, r19
     f12:	84 0b       	sbc	r24, r20
     f14:	ba f0       	brmi	.+46     	; 0xf44 <__addsf3x+0x98>
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	a1 f0       	breq	.+40     	; 0xf42 <__addsf3x+0x96>
     f1a:	ff 0f       	add	r31, r31
     f1c:	bb 1f       	adc	r27, r27
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	c2 f7       	brpl	.-16     	; 0xf16 <__addsf3x+0x6a>
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <__addsf3x+0x98>
     f28:	ba 0f       	add	r27, r26
     f2a:	62 1f       	adc	r22, r18
     f2c:	73 1f       	adc	r23, r19
     f2e:	84 1f       	adc	r24, r20
     f30:	48 f4       	brcc	.+18     	; 0xf44 <__addsf3x+0x98>
     f32:	87 95       	ror	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	9e 3f       	cpi	r25, 0xFE	; 254
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <__addsf3x+0x96>
     f40:	b3 cf       	rjmp	.-154    	; 0xea8 <__addsf3+0x1e>
     f42:	93 95       	inc	r25
     f44:	88 0f       	add	r24, r24
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__addsf3x+0x9e>
     f48:	99 27       	eor	r25, r25
     f4a:	ee 0f       	add	r30, r30
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	08 95       	ret

00000f52 <__cmpsf2>:
     f52:	d4 d0       	rcall	.+424    	; 0x10fc <__fp_cmp>
     f54:	08 f4       	brcc	.+2      	; 0xf58 <__cmpsf2+0x6>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	08 95       	ret

00000f5a <__divsf3>:
     f5a:	0c d0       	rcall	.+24     	; 0xf74 <__divsf3x>
     f5c:	0a c1       	rjmp	.+532    	; 0x1172 <__fp_round>
     f5e:	02 d1       	rcall	.+516    	; 0x1164 <__fp_pscB>
     f60:	40 f0       	brcs	.+16     	; 0xf72 <__divsf3+0x18>
     f62:	f9 d0       	rcall	.+498    	; 0x1156 <__fp_pscA>
     f64:	30 f0       	brcs	.+12     	; 0xf72 <__divsf3+0x18>
     f66:	21 f4       	brne	.+8      	; 0xf70 <__divsf3+0x16>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	19 f0       	breq	.+6      	; 0xf72 <__divsf3+0x18>
     f6c:	eb c0       	rjmp	.+470    	; 0x1144 <__fp_inf>
     f6e:	51 11       	cpse	r21, r1
     f70:	34 c1       	rjmp	.+616    	; 0x11da <__fp_szero>
     f72:	ee c0       	rjmp	.+476    	; 0x1150 <__fp_nan>

00000f74 <__divsf3x>:
     f74:	0f d1       	rcall	.+542    	; 0x1194 <__fp_split3>
     f76:	98 f3       	brcs	.-26     	; 0xf5e <__divsf3+0x4>

00000f78 <__divsf3_pse>:
     f78:	99 23       	and	r25, r25
     f7a:	c9 f3       	breq	.-14     	; 0xf6e <__divsf3+0x14>
     f7c:	55 23       	and	r21, r21
     f7e:	b1 f3       	breq	.-20     	; 0xf6c <__divsf3+0x12>
     f80:	95 1b       	sub	r25, r21
     f82:	55 0b       	sbc	r21, r21
     f84:	bb 27       	eor	r27, r27
     f86:	aa 27       	eor	r26, r26
     f88:	62 17       	cp	r22, r18
     f8a:	73 07       	cpc	r23, r19
     f8c:	84 07       	cpc	r24, r20
     f8e:	38 f0       	brcs	.+14     	; 0xf9e <__divsf3_pse+0x26>
     f90:	9f 5f       	subi	r25, 0xFF	; 255
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	44 1f       	adc	r20, r20
     f9a:	aa 1f       	adc	r26, r26
     f9c:	a9 f3       	breq	.-22     	; 0xf88 <__divsf3_pse+0x10>
     f9e:	33 d0       	rcall	.+102    	; 0x1006 <__divsf3_pse+0x8e>
     fa0:	0e 2e       	mov	r0, r30
     fa2:	3a f0       	brmi	.+14     	; 0xfb2 <__divsf3_pse+0x3a>
     fa4:	e0 e8       	ldi	r30, 0x80	; 128
     fa6:	30 d0       	rcall	.+96     	; 0x1008 <__divsf3_pse+0x90>
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	50 40       	sbci	r21, 0x00	; 0
     fac:	e6 95       	lsr	r30
     fae:	00 1c       	adc	r0, r0
     fb0:	ca f7       	brpl	.-14     	; 0xfa4 <__divsf3_pse+0x2c>
     fb2:	29 d0       	rcall	.+82     	; 0x1006 <__divsf3_pse+0x8e>
     fb4:	fe 2f       	mov	r31, r30
     fb6:	27 d0       	rcall	.+78     	; 0x1006 <__divsf3_pse+0x8e>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	bb 1f       	adc	r27, r27
     fc0:	26 17       	cp	r18, r22
     fc2:	37 07       	cpc	r19, r23
     fc4:	48 07       	cpc	r20, r24
     fc6:	ab 07       	cpc	r26, r27
     fc8:	b0 e8       	ldi	r27, 0x80	; 128
     fca:	09 f0       	breq	.+2      	; 0xfce <__divsf3_pse+0x56>
     fcc:	bb 0b       	sbc	r27, r27
     fce:	80 2d       	mov	r24, r0
     fd0:	bf 01       	movw	r22, r30
     fd2:	ff 27       	eor	r31, r31
     fd4:	93 58       	subi	r25, 0x83	; 131
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	2a f0       	brmi	.+10     	; 0xfe4 <__divsf3_pse+0x6c>
     fda:	9e 3f       	cpi	r25, 0xFE	; 254
     fdc:	51 05       	cpc	r21, r1
     fde:	68 f0       	brcs	.+26     	; 0xffa <__divsf3_pse+0x82>
     fe0:	b1 c0       	rjmp	.+354    	; 0x1144 <__fp_inf>
     fe2:	fb c0       	rjmp	.+502    	; 0x11da <__fp_szero>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	ec f3       	brlt	.-6      	; 0xfe2 <__divsf3_pse+0x6a>
     fe8:	98 3e       	cpi	r25, 0xE8	; 232
     fea:	dc f3       	brlt	.-10     	; 0xfe2 <__divsf3_pse+0x6a>
     fec:	86 95       	lsr	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	b7 95       	ror	r27
     ff4:	f7 95       	ror	r31
     ff6:	9f 5f       	subi	r25, 0xFF	; 255
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__divsf3_pse+0x74>
     ffa:	88 0f       	add	r24, r24
     ffc:	91 1d       	adc	r25, r1
     ffe:	96 95       	lsr	r25
    1000:	87 95       	ror	r24
    1002:	97 f9       	bld	r25, 7
    1004:	08 95       	ret
    1006:	e1 e0       	ldi	r30, 0x01	; 1
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	bb 1f       	adc	r27, r27
    1010:	62 17       	cp	r22, r18
    1012:	73 07       	cpc	r23, r19
    1014:	84 07       	cpc	r24, r20
    1016:	ba 07       	cpc	r27, r26
    1018:	20 f0       	brcs	.+8      	; 0x1022 <__divsf3_pse+0xaa>
    101a:	62 1b       	sub	r22, r18
    101c:	73 0b       	sbc	r23, r19
    101e:	84 0b       	sbc	r24, r20
    1020:	ba 0b       	sbc	r27, r26
    1022:	ee 1f       	adc	r30, r30
    1024:	88 f7       	brcc	.-30     	; 0x1008 <__divsf3_pse+0x90>
    1026:	e0 95       	com	r30
    1028:	08 95       	ret

0000102a <__fixunssfsi>:
    102a:	bc d0       	rcall	.+376    	; 0x11a4 <__fp_splitA>
    102c:	88 f0       	brcs	.+34     	; 0x1050 <__fixunssfsi+0x26>
    102e:	9f 57       	subi	r25, 0x7F	; 127
    1030:	90 f0       	brcs	.+36     	; 0x1056 <__fixunssfsi+0x2c>
    1032:	b9 2f       	mov	r27, r25
    1034:	99 27       	eor	r25, r25
    1036:	b7 51       	subi	r27, 0x17	; 23
    1038:	a0 f0       	brcs	.+40     	; 0x1062 <__fixunssfsi+0x38>
    103a:	d1 f0       	breq	.+52     	; 0x1070 <__fixunssfsi+0x46>
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	1a f0       	brmi	.+6      	; 0x104c <__fixunssfsi+0x22>
    1046:	ba 95       	dec	r27
    1048:	c9 f7       	brne	.-14     	; 0x103c <__fixunssfsi+0x12>
    104a:	12 c0       	rjmp	.+36     	; 0x1070 <__fixunssfsi+0x46>
    104c:	b1 30       	cpi	r27, 0x01	; 1
    104e:	81 f0       	breq	.+32     	; 0x1070 <__fixunssfsi+0x46>
    1050:	c3 d0       	rcall	.+390    	; 0x11d8 <__fp_zero>
    1052:	b1 e0       	ldi	r27, 0x01	; 1
    1054:	08 95       	ret
    1056:	c0 c0       	rjmp	.+384    	; 0x11d8 <__fp_zero>
    1058:	67 2f       	mov	r22, r23
    105a:	78 2f       	mov	r23, r24
    105c:	88 27       	eor	r24, r24
    105e:	b8 5f       	subi	r27, 0xF8	; 248
    1060:	39 f0       	breq	.+14     	; 0x1070 <__fixunssfsi+0x46>
    1062:	b9 3f       	cpi	r27, 0xF9	; 249
    1064:	cc f3       	brlt	.-14     	; 0x1058 <__fixunssfsi+0x2e>
    1066:	86 95       	lsr	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	b3 95       	inc	r27
    106e:	d9 f7       	brne	.-10     	; 0x1066 <__fixunssfsi+0x3c>
    1070:	3e f4       	brtc	.+14     	; 0x1080 <__fixunssfsi+0x56>
    1072:	90 95       	com	r25
    1074:	80 95       	com	r24
    1076:	70 95       	com	r23
    1078:	61 95       	neg	r22
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	08 95       	ret

00001082 <__floatunsisf>:
    1082:	e8 94       	clt
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <__floatsisf+0x12>

00001086 <__floatsisf>:
    1086:	97 fb       	bst	r25, 7
    1088:	3e f4       	brtc	.+14     	; 0x1098 <__floatsisf+0x12>
    108a:	90 95       	com	r25
    108c:	80 95       	com	r24
    108e:	70 95       	com	r23
    1090:	61 95       	neg	r22
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	99 23       	and	r25, r25
    109a:	a9 f0       	breq	.+42     	; 0x10c6 <__floatsisf+0x40>
    109c:	f9 2f       	mov	r31, r25
    109e:	96 e9       	ldi	r25, 0x96	; 150
    10a0:	bb 27       	eor	r27, r27
    10a2:	93 95       	inc	r25
    10a4:	f6 95       	lsr	r31
    10a6:	87 95       	ror	r24
    10a8:	77 95       	ror	r23
    10aa:	67 95       	ror	r22
    10ac:	b7 95       	ror	r27
    10ae:	f1 11       	cpse	r31, r1
    10b0:	f8 cf       	rjmp	.-16     	; 0x10a2 <__floatsisf+0x1c>
    10b2:	fa f4       	brpl	.+62     	; 0x10f2 <__floatsisf+0x6c>
    10b4:	bb 0f       	add	r27, r27
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__floatsisf+0x36>
    10b8:	60 ff       	sbrs	r22, 0
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <__floatsisf+0x6c>
    10bc:	6f 5f       	subi	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	16 c0       	rjmp	.+44     	; 0x10f2 <__floatsisf+0x6c>
    10c6:	88 23       	and	r24, r24
    10c8:	11 f0       	breq	.+4      	; 0x10ce <__floatsisf+0x48>
    10ca:	96 e9       	ldi	r25, 0x96	; 150
    10cc:	11 c0       	rjmp	.+34     	; 0x10f0 <__floatsisf+0x6a>
    10ce:	77 23       	and	r23, r23
    10d0:	21 f0       	breq	.+8      	; 0x10da <__floatsisf+0x54>
    10d2:	9e e8       	ldi	r25, 0x8E	; 142
    10d4:	87 2f       	mov	r24, r23
    10d6:	76 2f       	mov	r23, r22
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <__floatsisf+0x5e>
    10da:	66 23       	and	r22, r22
    10dc:	71 f0       	breq	.+28     	; 0x10fa <__floatsisf+0x74>
    10de:	96 e8       	ldi	r25, 0x86	; 134
    10e0:	86 2f       	mov	r24, r22
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	2a f0       	brmi	.+10     	; 0x10f2 <__floatsisf+0x6c>
    10e8:	9a 95       	dec	r25
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	da f7       	brpl	.-10     	; 0x10e8 <__floatsisf+0x62>
    10f2:	88 0f       	add	r24, r24
    10f4:	96 95       	lsr	r25
    10f6:	87 95       	ror	r24
    10f8:	97 f9       	bld	r25, 7
    10fa:	08 95       	ret

000010fc <__fp_cmp>:
    10fc:	99 0f       	add	r25, r25
    10fe:	00 08       	sbc	r0, r0
    1100:	55 0f       	add	r21, r21
    1102:	aa 0b       	sbc	r26, r26
    1104:	e0 e8       	ldi	r30, 0x80	; 128
    1106:	fe ef       	ldi	r31, 0xFE	; 254
    1108:	16 16       	cp	r1, r22
    110a:	17 06       	cpc	r1, r23
    110c:	e8 07       	cpc	r30, r24
    110e:	f9 07       	cpc	r31, r25
    1110:	c0 f0       	brcs	.+48     	; 0x1142 <__fp_cmp+0x46>
    1112:	12 16       	cp	r1, r18
    1114:	13 06       	cpc	r1, r19
    1116:	e4 07       	cpc	r30, r20
    1118:	f5 07       	cpc	r31, r21
    111a:	98 f0       	brcs	.+38     	; 0x1142 <__fp_cmp+0x46>
    111c:	62 1b       	sub	r22, r18
    111e:	73 0b       	sbc	r23, r19
    1120:	84 0b       	sbc	r24, r20
    1122:	95 0b       	sbc	r25, r21
    1124:	39 f4       	brne	.+14     	; 0x1134 <__fp_cmp+0x38>
    1126:	0a 26       	eor	r0, r26
    1128:	61 f0       	breq	.+24     	; 0x1142 <__fp_cmp+0x46>
    112a:	23 2b       	or	r18, r19
    112c:	24 2b       	or	r18, r20
    112e:	25 2b       	or	r18, r21
    1130:	21 f4       	brne	.+8      	; 0x113a <__fp_cmp+0x3e>
    1132:	08 95       	ret
    1134:	0a 26       	eor	r0, r26
    1136:	09 f4       	brne	.+2      	; 0x113a <__fp_cmp+0x3e>
    1138:	a1 40       	sbci	r26, 0x01	; 1
    113a:	a6 95       	lsr	r26
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	81 1d       	adc	r24, r1
    1140:	81 1d       	adc	r24, r1
    1142:	08 95       	ret

00001144 <__fp_inf>:
    1144:	97 f9       	bld	r25, 7
    1146:	9f 67       	ori	r25, 0x7F	; 127
    1148:	80 e8       	ldi	r24, 0x80	; 128
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	08 95       	ret

00001150 <__fp_nan>:
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	80 ec       	ldi	r24, 0xC0	; 192
    1154:	08 95       	ret

00001156 <__fp_pscA>:
    1156:	00 24       	eor	r0, r0
    1158:	0a 94       	dec	r0
    115a:	16 16       	cp	r1, r22
    115c:	17 06       	cpc	r1, r23
    115e:	18 06       	cpc	r1, r24
    1160:	09 06       	cpc	r0, r25
    1162:	08 95       	ret

00001164 <__fp_pscB>:
    1164:	00 24       	eor	r0, r0
    1166:	0a 94       	dec	r0
    1168:	12 16       	cp	r1, r18
    116a:	13 06       	cpc	r1, r19
    116c:	14 06       	cpc	r1, r20
    116e:	05 06       	cpc	r0, r21
    1170:	08 95       	ret

00001172 <__fp_round>:
    1172:	09 2e       	mov	r0, r25
    1174:	03 94       	inc	r0
    1176:	00 0c       	add	r0, r0
    1178:	11 f4       	brne	.+4      	; 0x117e <__fp_round+0xc>
    117a:	88 23       	and	r24, r24
    117c:	52 f0       	brmi	.+20     	; 0x1192 <__fp_round+0x20>
    117e:	bb 0f       	add	r27, r27
    1180:	40 f4       	brcc	.+16     	; 0x1192 <__fp_round+0x20>
    1182:	bf 2b       	or	r27, r31
    1184:	11 f4       	brne	.+4      	; 0x118a <__fp_round+0x18>
    1186:	60 ff       	sbrs	r22, 0
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <__fp_round+0x20>
    118a:	6f 5f       	subi	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	8f 4f       	sbci	r24, 0xFF	; 255
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	08 95       	ret

00001194 <__fp_split3>:
    1194:	57 fd       	sbrc	r21, 7
    1196:	90 58       	subi	r25, 0x80	; 128
    1198:	44 0f       	add	r20, r20
    119a:	55 1f       	adc	r21, r21
    119c:	59 f0       	breq	.+22     	; 0x11b4 <__fp_splitA+0x10>
    119e:	5f 3f       	cpi	r21, 0xFF	; 255
    11a0:	71 f0       	breq	.+28     	; 0x11be <__fp_splitA+0x1a>
    11a2:	47 95       	ror	r20

000011a4 <__fp_splitA>:
    11a4:	88 0f       	add	r24, r24
    11a6:	97 fb       	bst	r25, 7
    11a8:	99 1f       	adc	r25, r25
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <__fp_splitA+0x20>
    11ac:	9f 3f       	cpi	r25, 0xFF	; 255
    11ae:	79 f0       	breq	.+30     	; 0x11ce <__fp_splitA+0x2a>
    11b0:	87 95       	ror	r24
    11b2:	08 95       	ret
    11b4:	12 16       	cp	r1, r18
    11b6:	13 06       	cpc	r1, r19
    11b8:	14 06       	cpc	r1, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	f2 cf       	rjmp	.-28     	; 0x11a2 <__fp_split3+0xe>
    11be:	46 95       	lsr	r20
    11c0:	f1 df       	rcall	.-30     	; 0x11a4 <__fp_splitA>
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <__fp_splitA+0x30>
    11c4:	16 16       	cp	r1, r22
    11c6:	17 06       	cpc	r1, r23
    11c8:	18 06       	cpc	r1, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	f1 cf       	rjmp	.-30     	; 0x11b0 <__fp_splitA+0xc>
    11ce:	86 95       	lsr	r24
    11d0:	71 05       	cpc	r23, r1
    11d2:	61 05       	cpc	r22, r1
    11d4:	08 94       	sec
    11d6:	08 95       	ret

000011d8 <__fp_zero>:
    11d8:	e8 94       	clt

000011da <__fp_szero>:
    11da:	bb 27       	eor	r27, r27
    11dc:	66 27       	eor	r22, r22
    11de:	77 27       	eor	r23, r23
    11e0:	cb 01       	movw	r24, r22
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret

000011e6 <__gesf2>:
    11e6:	8a df       	rcall	.-236    	; 0x10fc <__fp_cmp>
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <__gesf2+0x6>
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	08 95       	ret

000011ee <__mulsf3>:
    11ee:	0a d0       	rcall	.+20     	; 0x1204 <__mulsf3x>
    11f0:	c0 cf       	rjmp	.-128    	; 0x1172 <__fp_round>
    11f2:	b1 df       	rcall	.-158    	; 0x1156 <__fp_pscA>
    11f4:	28 f0       	brcs	.+10     	; 0x1200 <__mulsf3+0x12>
    11f6:	b6 df       	rcall	.-148    	; 0x1164 <__fp_pscB>
    11f8:	18 f0       	brcs	.+6      	; 0x1200 <__mulsf3+0x12>
    11fa:	95 23       	and	r25, r21
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__mulsf3+0x12>
    11fe:	a2 cf       	rjmp	.-188    	; 0x1144 <__fp_inf>
    1200:	a7 cf       	rjmp	.-178    	; 0x1150 <__fp_nan>
    1202:	eb cf       	rjmp	.-42     	; 0x11da <__fp_szero>

00001204 <__mulsf3x>:
    1204:	c7 df       	rcall	.-114    	; 0x1194 <__fp_split3>
    1206:	a8 f3       	brcs	.-22     	; 0x11f2 <__mulsf3+0x4>

00001208 <__mulsf3_pse>:
    1208:	99 23       	and	r25, r25
    120a:	d9 f3       	breq	.-10     	; 0x1202 <__mulsf3+0x14>
    120c:	55 23       	and	r21, r21
    120e:	c9 f3       	breq	.-14     	; 0x1202 <__mulsf3+0x14>
    1210:	95 0f       	add	r25, r21
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	55 1f       	adc	r21, r21
    1216:	aa 27       	eor	r26, r26
    1218:	ee 27       	eor	r30, r30
    121a:	ff 27       	eor	r31, r31
    121c:	bb 27       	eor	r27, r27
    121e:	00 24       	eor	r0, r0
    1220:	08 94       	sec
    1222:	67 95       	ror	r22
    1224:	20 f4       	brcc	.+8      	; 0x122e <__mulsf3_pse+0x26>
    1226:	e2 0f       	add	r30, r18
    1228:	f3 1f       	adc	r31, r19
    122a:	b4 1f       	adc	r27, r20
    122c:	0a 1e       	adc	r0, r26
    122e:	22 0f       	add	r18, r18
    1230:	33 1f       	adc	r19, r19
    1232:	44 1f       	adc	r20, r20
    1234:	aa 1f       	adc	r26, r26
    1236:	66 95       	lsr	r22
    1238:	a9 f7       	brne	.-22     	; 0x1224 <__mulsf3_pse+0x1c>
    123a:	77 95       	ror	r23
    123c:	30 f4       	brcc	.+12     	; 0x124a <__mulsf3_pse+0x42>
    123e:	f3 0f       	add	r31, r19
    1240:	b4 1f       	adc	r27, r20
    1242:	0a 1e       	adc	r0, r26
    1244:	12 1e       	adc	r1, r18
    1246:	08 f4       	brcc	.+2      	; 0x124a <__mulsf3_pse+0x42>
    1248:	63 95       	inc	r22
    124a:	33 0f       	add	r19, r19
    124c:	44 1f       	adc	r20, r20
    124e:	aa 1f       	adc	r26, r26
    1250:	22 1f       	adc	r18, r18
    1252:	76 95       	lsr	r23
    1254:	99 f7       	brne	.-26     	; 0x123c <__mulsf3_pse+0x34>
    1256:	87 95       	ror	r24
    1258:	20 f4       	brcc	.+8      	; 0x1262 <__mulsf3_pse+0x5a>
    125a:	b4 0f       	add	r27, r20
    125c:	0a 1e       	adc	r0, r26
    125e:	12 1e       	adc	r1, r18
    1260:	63 1f       	adc	r22, r19
    1262:	44 0f       	add	r20, r20
    1264:	aa 1f       	adc	r26, r26
    1266:	22 1f       	adc	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	86 95       	lsr	r24
    126c:	a9 f7       	brne	.-22     	; 0x1258 <__mulsf3_pse+0x50>
    126e:	86 2f       	mov	r24, r22
    1270:	71 2d       	mov	r23, r1
    1272:	60 2d       	mov	r22, r0
    1274:	11 24       	eor	r1, r1
    1276:	9f 57       	subi	r25, 0x7F	; 127
    1278:	50 40       	sbci	r21, 0x00	; 0
    127a:	8a f0       	brmi	.+34     	; 0x129e <__mulsf3_pse+0x96>
    127c:	e1 f0       	breq	.+56     	; 0x12b6 <__mulsf3_pse+0xae>
    127e:	88 23       	and	r24, r24
    1280:	4a f0       	brmi	.+18     	; 0x1294 <__mulsf3_pse+0x8c>
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	bb 1f       	adc	r27, r27
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	a9 f7       	brne	.-22     	; 0x127e <__mulsf3_pse+0x76>
    1294:	9e 3f       	cpi	r25, 0xFE	; 254
    1296:	51 05       	cpc	r21, r1
    1298:	70 f0       	brcs	.+28     	; 0x12b6 <__mulsf3_pse+0xae>
    129a:	54 cf       	rjmp	.-344    	; 0x1144 <__fp_inf>
    129c:	9e cf       	rjmp	.-196    	; 0x11da <__fp_szero>
    129e:	5f 3f       	cpi	r21, 0xFF	; 255
    12a0:	ec f3       	brlt	.-6      	; 0x129c <__mulsf3_pse+0x94>
    12a2:	98 3e       	cpi	r25, 0xE8	; 232
    12a4:	dc f3       	brlt	.-10     	; 0x129c <__mulsf3_pse+0x94>
    12a6:	86 95       	lsr	r24
    12a8:	77 95       	ror	r23
    12aa:	67 95       	ror	r22
    12ac:	b7 95       	ror	r27
    12ae:	f7 95       	ror	r31
    12b0:	e7 95       	ror	r30
    12b2:	9f 5f       	subi	r25, 0xFF	; 255
    12b4:	c1 f7       	brne	.-16     	; 0x12a6 <__mulsf3_pse+0x9e>
    12b6:	fe 2b       	or	r31, r30
    12b8:	88 0f       	add	r24, r24
    12ba:	91 1d       	adc	r25, r1
    12bc:	96 95       	lsr	r25
    12be:	87 95       	ror	r24
    12c0:	97 f9       	bld	r25, 7
    12c2:	08 95       	ret

000012c4 <do_rand>:
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    12da:	88 81       	ld	r24, Y
    12dc:	99 81       	ldd	r25, Y+1	; 0x01
    12de:	aa 81       	ldd	r26, Y+2	; 0x02
    12e0:	bb 81       	ldd	r27, Y+3	; 0x03
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	a1 05       	cpc	r26, r1
    12e6:	b1 05       	cpc	r27, r1
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <do_rand+0x2e>
    12ea:	84 e2       	ldi	r24, 0x24	; 36
    12ec:	99 ed       	ldi	r25, 0xD9	; 217
    12ee:	ab e5       	ldi	r26, 0x5B	; 91
    12f0:	b7 e0       	ldi	r27, 0x07	; 7
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	2d e1       	ldi	r18, 0x1D	; 29
    12f8:	33 ef       	ldi	r19, 0xF3	; 243
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodsi4>
    1302:	69 01       	movw	r12, r18
    1304:	7a 01       	movw	r14, r20
    1306:	27 ea       	ldi	r18, 0xA7	; 167
    1308:	31 e4       	ldi	r19, 0x41	; 65
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	0e 94 c3 09 	call	0x1386	; 0x1386 <__mulsi3>
    1312:	4b 01       	movw	r8, r22
    1314:	5c 01       	movw	r10, r24
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	2c ee       	ldi	r18, 0xEC	; 236
    131c:	34 ef       	ldi	r19, 0xF4	; 244
    131e:	4f ef       	ldi	r20, 0xFF	; 255
    1320:	5f ef       	ldi	r21, 0xFF	; 255
    1322:	0e 94 c3 09 	call	0x1386	; 0x1386 <__mulsi3>
    1326:	ab 01       	movw	r20, r22
    1328:	bc 01       	movw	r22, r24
    132a:	48 0d       	add	r20, r8
    132c:	59 1d       	adc	r21, r9
    132e:	6a 1d       	adc	r22, r10
    1330:	7b 1d       	adc	r23, r11
    1332:	77 ff       	sbrs	r23, 7
    1334:	04 c0       	rjmp	.+8      	; 0x133e <do_rand+0x7a>
    1336:	41 50       	subi	r20, 0x01	; 1
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	60 40       	sbci	r22, 0x00	; 0
    133c:	70 48       	sbci	r23, 0x80	; 128
    133e:	48 83       	st	Y, r20
    1340:	59 83       	std	Y+1, r21	; 0x01
    1342:	6a 83       	std	Y+2, r22	; 0x02
    1344:	7b 83       	std	Y+3, r23	; 0x03
    1346:	5f 77       	andi	r21, 0x7F	; 127
    1348:	ca 01       	movw	r24, r20
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	08 95       	ret

00001360 <rand_r>:
    1360:	0e 94 62 09 	call	0x12c4	; 0x12c4 <do_rand>
    1364:	08 95       	ret

00001366 <rand>:
    1366:	89 e5       	ldi	r24, 0x59	; 89
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <do_rand>
    136e:	08 95       	ret

00001370 <srand>:
    1370:	a0 e0       	ldi	r26, 0x00	; 0
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	80 93 59 01 	sts	0x0159, r24
    1378:	90 93 5a 01 	sts	0x015A, r25
    137c:	a0 93 5b 01 	sts	0x015B, r26
    1380:	b0 93 5c 01 	sts	0x015C, r27
    1384:	08 95       	ret

00001386 <__mulsi3>:
    1386:	ff 27       	eor	r31, r31
    1388:	ee 27       	eor	r30, r30
    138a:	bb 27       	eor	r27, r27
    138c:	aa 27       	eor	r26, r26

0000138e <__mulsi3_loop>:
    138e:	60 ff       	sbrs	r22, 0
    1390:	04 c0       	rjmp	.+8      	; 0x139a <__mulsi3_skip1>
    1392:	a2 0f       	add	r26, r18
    1394:	b3 1f       	adc	r27, r19
    1396:	e4 1f       	adc	r30, r20
    1398:	f5 1f       	adc	r31, r21

0000139a <__mulsi3_skip1>:
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	44 1f       	adc	r20, r20
    13a0:	55 1f       	adc	r21, r21
    13a2:	96 95       	lsr	r25
    13a4:	87 95       	ror	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	89 f7       	brne	.-30     	; 0x138e <__mulsi3_loop>
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	76 07       	cpc	r23, r22
    13b0:	71 f7       	brne	.-36     	; 0x138e <__mulsi3_loop>

000013b2 <__mulsi3_exit>:
    13b2:	cf 01       	movw	r24, r30
    13b4:	bd 01       	movw	r22, r26
    13b6:	08 95       	ret

000013b8 <__divmodsi4>:
    13b8:	97 fb       	bst	r25, 7
    13ba:	09 2e       	mov	r0, r25
    13bc:	05 26       	eor	r0, r21
    13be:	0e d0       	rcall	.+28     	; 0x13dc <__divmodsi4_neg1>
    13c0:	57 fd       	sbrc	r21, 7
    13c2:	04 d0       	rcall	.+8      	; 0x13cc <__divmodsi4_neg2>
    13c4:	14 d0       	rcall	.+40     	; 0x13ee <__udivmodsi4>
    13c6:	0a d0       	rcall	.+20     	; 0x13dc <__divmodsi4_neg1>
    13c8:	00 1c       	adc	r0, r0
    13ca:	38 f4       	brcc	.+14     	; 0x13da <__divmodsi4_exit>

000013cc <__divmodsi4_neg2>:
    13cc:	50 95       	com	r21
    13ce:	40 95       	com	r20
    13d0:	30 95       	com	r19
    13d2:	21 95       	neg	r18
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	4f 4f       	sbci	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255

000013da <__divmodsi4_exit>:
    13da:	08 95       	ret

000013dc <__divmodsi4_neg1>:
    13dc:	f6 f7       	brtc	.-4      	; 0x13da <__divmodsi4_exit>
    13de:	90 95       	com	r25
    13e0:	80 95       	com	r24
    13e2:	70 95       	com	r23
    13e4:	61 95       	neg	r22
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__udivmodsi4>:
    13ee:	a1 e2       	ldi	r26, 0x21	; 33
    13f0:	1a 2e       	mov	r1, r26
    13f2:	aa 1b       	sub	r26, r26
    13f4:	bb 1b       	sub	r27, r27
    13f6:	fd 01       	movw	r30, r26
    13f8:	0d c0       	rjmp	.+26     	; 0x1414 <__udivmodsi4_ep>

000013fa <__udivmodsi4_loop>:
    13fa:	aa 1f       	adc	r26, r26
    13fc:	bb 1f       	adc	r27, r27
    13fe:	ee 1f       	adc	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	a2 17       	cp	r26, r18
    1404:	b3 07       	cpc	r27, r19
    1406:	e4 07       	cpc	r30, r20
    1408:	f5 07       	cpc	r31, r21
    140a:	20 f0       	brcs	.+8      	; 0x1414 <__udivmodsi4_ep>
    140c:	a2 1b       	sub	r26, r18
    140e:	b3 0b       	sbc	r27, r19
    1410:	e4 0b       	sbc	r30, r20
    1412:	f5 0b       	sbc	r31, r21

00001414 <__udivmodsi4_ep>:
    1414:	66 1f       	adc	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	88 1f       	adc	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	1a 94       	dec	r1
    141e:	69 f7       	brne	.-38     	; 0x13fa <__udivmodsi4_loop>
    1420:	60 95       	com	r22
    1422:	70 95       	com	r23
    1424:	80 95       	com	r24
    1426:	90 95       	com	r25
    1428:	9b 01       	movw	r18, r22
    142a:	ac 01       	movw	r20, r24
    142c:	bd 01       	movw	r22, r26
    142e:	cf 01       	movw	r24, r30
    1430:	08 95       	ret

00001432 <_exit>:
    1432:	f8 94       	cli

00001434 <__stop_program>:
    1434:	ff cf       	rjmp	.-2      	; 0x1434 <__stop_program>
